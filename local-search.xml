<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nestjs学习笔记</title>
    <link href="/2025/07/27/Nestjs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/07/27/Nestjs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Nest-js学习笔记"><a href="#Nest-js学习笔记" class="headerlink" title="Nest.js学习笔记"></a>Nest.js学习笔记</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Nest（NestJS）是一个用于构建高效、可扩展的 <a href="https://nodejs.org/">Node.js</a> 服务端应用的框架。它采用渐进式 JavaScript，使用 <a href="http://www.typescriptlang.org/">TypeScript</a> 构建并全面支持 TypeScript（同时仍允许开发者使用纯 JavaScript 编码），融合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数响应式编程）的元素。</p><p>在底层，Nest 使用了强大的 HTTP 服务器框架如 <a href="https://expressjs.com/">Express</a>（默认），也可以配置使用 <a href="https://github.com/fastify/fastify">Fastify</a>！</p><p>Nest 在这些常见的 Node.js 框架（Express&#x2F;Fastify）之上提供了一层抽象，同时也将其 API 直接暴露给开发者。这使得开发者能够自由使用底层平台提供的众多第三方模块。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><p>默认使用Nestjs脚手架安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pnpm i @nestjs/cli<br>nest new project-name<br></code></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./project-name<br>pnpm run start<br></code></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><h4 id="NestFactory"><a href="#NestFactory" class="headerlink" title="NestFactory"></a>NestFactory</h4><p><code>NestFactory</code> 暴露了几个静态方法，允许创建应用程序实例。<code>create()</code> 方法返回一个应用程序对象<code>NestApplication</code> ，该对象实现了 <code>INestApplication</code> 接口。该对象提供了一组方法，这些方法将在后续章节中描述。我们启动了 HTTP 监听器，这让应用程序可以等待入站的 HTTP 请求。</p><h4 id="Platform-express-Platform-fastify"><a href="#Platform-express-Platform-fastify" class="headerlink" title="Platform-express&#x2F;Platform-fastify"></a>Platform-express&#x2F;Platform-fastify</h4><p>Nest 旨在成为一个平台无关的框架。平台独立性使得创建可重用的逻辑部分成为可能，开发者可以在几种不同类型的应用程序中利用这些部分。从技术上讲，一旦创建了适配器，Nest 就能够与任何 Node HTTP 框架一起工作(<code>AbstractHttpAdapter</code>)。开箱即用支持两个 HTTP 平台：<a href="https://expressjs.com/">express</a> 和 <a href="https://www.fastify.io/">fastify</a>。你可以选择最适合你需求的平台。</p><h2 id="Nest-CLI"><a href="#Nest-CLI" class="headerlink" title="Nest CLI"></a>Nest CLI</h2><p><a href="https://github.com/nestjs/nest-cli">Nest CLI</a> 是一个命令行界面工具，可帮助您初始化、开发和维护 Nest 应用程序。它以多种方式提供支持，包括项目脚手架搭建、开发模式下的服务运行，以及为生产环境构建和打包应用程序。该工具体现了最佳实践的架构模式，以鼓励构建结构良好的应用。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol><li><p><code>new</code>:搭建一个包含所有运行所需样板文件的标准模式应用程序</p></li><li><p><code>generate</code>:根据原理图生成和&#x2F;或修改文件</p></li><li><p><code>build</code>:将应用程序或工作区编译到输出文件夹中</p></li><li><p><code>start</code>:编译并运行应用程序（或工作区中的默认项目）</p></li><li><p><code>info</code>:显示已安装的 Nest 包信息及其他有用的系统信息。</p></li></ol><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>Nest 有两种代码组织模式：</p><ul><li><strong>标准模式</strong> ：适用于构建专注于单个项目的应用程序，这些应用程序拥有自己的依赖项和设置，不需要优化模块共享或复杂构建。这是默认模式。</li><li><strong>monorepo 模式</strong> ：该模式将代码产物视为轻量级 <strong>monorepo</strong> 的一部分，可能更适合开发团队和&#x2F;或多项目环境。它自动化了部分构建过程，便于创建和组合模块化组件，促进代码重用，简化集成测试，便于共享项目范围内的产物（如 <code>eslint</code> 规则和其他配置策略），且比 Git 子模块等替代方案更易使用。Monorepo 模式采用<strong>工作区</strong>的概念（在 <code>nest-cli.json</code> 文件中表示）来协调 monorepo 各组件间的关系。</li></ul><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><h4 id="NestJS-中的库（Library）与-Monorepo-结构"><a href="#NestJS-中的库（Library）与-Monorepo-结构" class="headerlink" title="NestJS 中的库（Library）与 Monorepo 结构"></a>NestJS 中的库（Library）与 Monorepo 结构</h4><p>NestJS 提供了多种方式实现模块化复用，其中之一就是<strong>库（Library）</strong>。它适合将通用功能抽离成可复用模块，尤其在 <strong>monorepo</strong> 项目结构中表现更佳。</p><h4 id="库的用途"><a href="#库的用途" class="headerlink" title="库的用途"></a>库的用途</h4><ul><li><p>用于组织内共享模块（如认证、日志等通用逻辑）</p></li><li><p>提高复用性，简化应用组装与维护</p></li><li><p>配合 monorepo，可直接引用最新代码，方便协作开发与测试</p></li></ul><h4 id="库-vs-应用"><a href="#库-vs-应用" class="headerlink" title="库 vs 应用"></a>库 vs 应用</h4><ul><li><p><strong>库不是独立运行的项目</strong>，必须导入到某个应用中使用</p></li><li><p>Nest 使用不同的构建配置管理库，如 <code>entryFile: index</code> 而不是 <code>main</code></p></li><li><p>每个库在 <code>libs/</code> 目录下维护，配置写入 <code>nest-cli.json</code> 和 <code>tsconfig.json</code></p></li></ul><h4 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h4><p>使用 CLI 命令创建库：</p><p><code>nest g library my-library</code></p><ul><li><p>系统会要求输入前缀（默认 <code>@app</code>），用于 import 路径别名</p></li><li><p>会在 <code>libs/</code> 下生成对应目录和配置</p></li></ul><h4 id="构建库"><a href="#构建库" class="headerlink" title="构建库"></a>构建库</h4><p><code>nest build my-library</code></p><h4 id="在应用中使用库"><a href="#在应用中使用库" class="headerlink" title="在应用中使用库"></a>在应用中使用库</h4><p>在应用模块中引入库模块：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MyLibraryModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@app/my-library&#x27;</span>; <br><span class="hljs-meta">@Module</span>(&#123;  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">MyLibraryModule</span>],&#125;) <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><p>此处的 <code>@app/my-library</code> 是通过 tsconfig 的路径映射实现的，Nest 在添加库时自动配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>    <span class="hljs-attr">&quot;@app/my-library&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;libs/my-library/src&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@app/my-library/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;libs/my-library/src/*&quot;</span><span class="hljs-punctuation">]</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><a href="https://docs.nestjs.cn/cli/usages.html" target="_blank">NestCLI用法</a></p><h4 id="nest-generate"><a href="#nest-generate" class="headerlink" title="nest generate"></a>nest generate</h4><p>根据原理图生成和&#x2F;或修改文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest generate &lt;schematic&gt; &lt;name&gt; [options]<br>nest g &lt;schematic&gt; &lt;name&gt; [options]<br></code></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;schematic&gt;</code></td><td>要生成的 schematic 或 collection:schematic。可用的 schematic 请参阅下表。</td></tr><tr><td><code>&lt;name&gt;</code></td><td>所生成组件的名称。</td></tr></tbody></table><h5 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h5><table><thead><tr><th>名称</th><th>别名</th><th>描述</th></tr></thead><tbody><tr><td>app</td><td></td><td>在 monorepo 中生成一个新应用（如果是标准结构则转换为 monorepo）。</td></tr><tr><td>library</td><td>lib</td><td>在 monorepo 中生成一个新库（如果是标准结构则转换为 monorepo）。</td></tr><tr><td>class</td><td>cl</td><td>生成一个新类。</td></tr><tr><td>controller</td><td>co</td><td>生成控制器声明。</td></tr><tr><td>decorator</td><td>d</td><td>生成自定义装饰器。</td></tr><tr><td>filter</td><td>f</td><td>生成过滤器声明。</td></tr><tr><td>gateway</td><td>ga</td><td>生成网关声明。</td></tr><tr><td>guard</td><td>gu</td><td>生成守卫声明。</td></tr><tr><td>interface</td><td>itf</td><td>生成一个接口。</td></tr><tr><td>interceptor</td><td>itc</td><td>生成一个拦截器声明。</td></tr><tr><td>middleware</td><td>mi</td><td>生成一个中间件声明。</td></tr><tr><td>module</td><td>mo</td><td>生成一个模块声明。</td></tr><tr><td>pipe</td><td>pi</td><td>生成管道声明。</td></tr><tr><td>provider</td><td>pr</td><td>生成提供者声明。</td></tr><tr><td>resolver</td><td>r</td><td>生成解析器声明。</td></tr><tr><td>resource</td><td>res</td><td>生成新的 CRUD 资源。详情请参阅 CRUD（资源）生成器 。（仅限 TS）</td></tr><tr><td>service</td><td>s</td><td>生成服务声明</td></tr></tbody></table><h2 id="Nest控制器与路由"><a href="#Nest控制器与路由" class="headerlink" title="Nest控制器与路由"></a>Nest控制器与路由</h2><p>控制器负责处理传入的<strong>请求</strong>并向客户端返回<strong>响应</strong>。</p><p>控制器的目的是处理应用程序的特定请求。<strong>路由</strong>机制决定了哪个控制器将处理每个请求。通常，一个控制器具有多个路由，每个路由可以执行不同的操作。</p><p>要创建基本控制器，我们使用类和<strong>装饰器</strong>。装饰器将类与必要的元数据关联起来，使 Nest 能够创建将请求连接到相应控制器的路由映射。</p><h3 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器(Controller)"></a>控制器(Controller)</h3><p>控制器负责处理传入的<strong>请求</strong>并向客户端返回<strong>响应</strong>。</p><p>控制器的目的是处理应用程序的特定请求。<strong>路由</strong>机制决定了哪个控制器将处理每个请求。通常，一个控制器具有多个路由，每个路由可以执行不同的操作。</p><p>要创建基本控制器，我们使用类和<strong>装饰器</strong>。装饰器将类与必要的元数据关联起来，使 Nest 能够创建将请求连接到相应控制器的路由映射。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;cats&#x27;</span>) <span class="hljs-comment">// 设置路由前缀</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatsController</span> &#123;<br>  <span class="hljs-meta">@Get</span>() <span class="hljs-comment">// 处理 GET /cats 请求</span><br>  <span class="hljs-title function_">findAll</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;This action returns all cats&#x27;</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>💡 使用 CLI 快速生成控制器：  <code>$ nest g controller [name]</code></p></blockquote><h4 id="路由路径组成"><a href="#路由路径组成" class="headerlink" title="路由路径组成"></a>路由路径组成</h4><p>一个处理器的完整路由由两部分组成：</p><ul><li><p>控制器 <em>@Controller()</em> 的路径前缀（如 <code>&#39;cats&#39;</code>）</p></li><li><p>方法装饰器 <em>@Get()</em> 指定的路径（如 <code>@Get(&#39;breed&#39;)</code></p></li></ul><h4 id="路由装饰器"><a href="#路由装饰器" class="headerlink" title="路由装饰器"></a>路由装饰器</h4><table><thead><tr><th>装饰器</th><th>对应 HTTP 方法</th><th>用途说明</th></tr></thead><tbody><tr><td><code>@Get()</code></td><td>GET</td><td>获取资源（读取数据）</td></tr><tr><td><code>@Post()</code></td><td>POST</td><td>创建资源（提交数据）</td></tr><tr><td><code>@Put()</code></td><td>PUT</td><td>替换资源（整体更新）</td></tr><tr><td><code>@Patch()</code></td><td>PATCH</td><td>更新资源（部分更新）</td></tr><tr><td><code>@Delete()</code></td><td>DELETE</td><td>删除资源</td></tr><tr><td><code>@Options()</code></td><td>OPTIONS</td><td>获取通信选项</td></tr><tr><td><code>@Head()</code></td><td>HEAD</td><td>类似 GET，但不返回响应体</td></tr></tbody></table><h4 id="路由装饰器实践"><a href="#路由装饰器实践" class="headerlink" title="路由装饰器实践"></a>路由装饰器实践</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;users&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;GET /users&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">findOne</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`GET /users/<span class="hljs-subst">$&#123;id&#125;</span>`</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Post</span>()<br>  <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() <span class="hljs-attr">dto</span>: <span class="hljs-title class_">CreateUserDto</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;POST /users&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Put</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>, <span class="hljs-meta">@Body</span>() <span class="hljs-attr">dto</span>: <span class="hljs-title class_">UpdateUserDto</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`PUT /users/<span class="hljs-subst">$&#123;id&#125;</span>`</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Patch</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">partialUpdate</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>, <span class="hljs-meta">@Body</span>() <span class="hljs-attr">partial</span>: <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">UpdateUserDto</span>&gt;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`PATCH /users/<span class="hljs-subst">$&#123;id&#125;</span>`</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Delete</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">remove</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`DELETE /users/<span class="hljs-subst">$&#123;id&#125;</span>`</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="请求方法装饰器"><a href="#请求方法装饰器" class="headerlink" title="请求方法装饰器"></a>请求方法装饰器</h4><table><thead><tr><th>装饰器</th><th>来源位置</th><th>作用</th><th>典型用于方法</th><th>示例路径</th></tr></thead><tbody><tr><td><code>@Body()</code></td><td>请求体（body）</td><td>获取 POST&#x2F;PUT&#x2F;PATCH 请求中的 JSON 或表单数据</td><td><code>@Post()</code>、<code>@Put()</code>、<code>@Patch()</code></td><td>POST &#x2F;cats</td></tr><tr><td><code>@Param()</code></td><td>路径参数（params）</td><td>获取 URL 中的动态参数值</td><td><code>@Get()</code>、<code>@Put()</code>、<code>@Delete()</code></td><td>GET &#x2F;cats&#x2F;:id</td></tr><tr><td><code>@Query()</code></td><td>查询参数（query）</td><td>获取 URL 中 <code>?key=value</code> 格式参数</td><td>通常用于 <code>@Get()</code></td><td>GET &#x2F;cats?age&#x3D;3</td></tr><tr><td><code>@Headers()</code></td><td>请求头（headers）</td><td>获取请求头字段</td><td>任何请求</td><td>—</td></tr><tr><td><code>@Req()</code></td><td>原始请求对象（Request）</td><td>获取完整请求对象（Express&#x2F;Fastify）</td><td>任何请求</td><td>—</td></tr><tr><td><code>@Res()</code></td><td>原始响应对象（Response）</td><td>手动控制响应（状态码、headers）</td><td>任何请求</td><td>—</td></tr><tr><td><code>@Ip()</code></td><td>客户端 IP 地址</td><td>获取客户端 IP 地址</td><td>任何请求</td><td>—</td></tr><tr><td><code>@HostParam()</code></td><td>路由主机参数</td><td>用于基于主机名的路由</td><td>较少使用</td><td>—</td></tr></tbody></table><h4 id="请求方法装饰器实践"><a href="#请求方法装饰器实践" class="headerlink" title="请求方法装饰器实践"></a>请求方法装饰器实践</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Post</span>()<br><span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() <span class="hljs-attr">createCatDto</span>: <span class="hljs-title class_">CreateCatDto</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`创建猫: <span class="hljs-subst">$&#123;createCatDto.name&#125;</span>`</span>;<br>&#125;<br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br><span class="hljs-title function_">findOne</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`查找 ID 为 <span class="hljs-subst">$&#123;id&#125;</span> 的猫`</span>;<br>&#125;<br><br><span class="hljs-meta">@Get</span>()<br><span class="hljs-title function_">findByAge</span>(<span class="hljs-params"><span class="hljs-meta">@Query</span>(<span class="hljs-string">&#x27;age&#x27;</span>) <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`查找年龄为 <span class="hljs-subst">$&#123;age&#125;</span> 的猫`</span>;<br>&#125;<br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;header-info&#x27;</span>)<br><span class="hljs-title function_">getHeader</span>(<span class="hljs-params"><span class="hljs-meta">@Headers</span>(<span class="hljs-string">&#x27;user-agent&#x27;</span>) <span class="hljs-attr">ua</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`你的 User-Agent 是 <span class="hljs-subst">$&#123;ua&#125;</span>`</span>;<br>&#125;<br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;ip&#x27;</span>)<br><span class="hljs-title function_">getClientIp</span>(<span class="hljs-params"><span class="hljs-meta">@Ip</span>() <span class="hljs-attr">ip</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`客户端 IP: <span class="hljs-subst">$&#123;ip&#125;</span>`</span>;<br>&#125;<br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;raw&#x27;</span>)<br><span class="hljs-title function_">getRawRequest</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() <span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> req.<span class="hljs-property">headers</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最佳实践参考"><a href="#最佳实践参考" class="headerlink" title="最佳实践参考"></a>最佳实践参考</h4><h5 id="拿客户端请求"><a href="#拿客户端请求" class="headerlink" title="拿客户端请求"></a>拿客户端请求</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// cats.controller.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Body</span>, <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;cats&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatsController</span> &#123;<br>  <span class="hljs-meta">@Post</span>()<br>  <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() createCatDto</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; name, age, breed &#125; = createCatDto;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`创建了猫：<span class="hljs-subst">$&#123;name&#125;</span>, 年龄：<span class="hljs-subst">$&#123;age&#125;</span>, 品种：<span class="hljs-subst">$&#123;breed&#125;</span>`</span>;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h5><p>路径：<code>GET /cats/:id</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//多个参数</span><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;:id/:action&#x27;</span>)<br><span class="hljs-title function_">handle</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>() <span class="hljs-attr">params</span>: &#123; id: <span class="hljs-built_in">string</span>; action: <span class="hljs-built_in">string</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`对猫 <span class="hljs-subst">$&#123;params.id&#125;</span> 执行动作 <span class="hljs-subst">$&#123;params.action&#125;</span>`</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h5><p>路径：<code>GET /cats?age=3&amp;breed=short</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Get</span>()<br><span class="hljs-title function_">filter</span>(<span class="hljs-params"><span class="hljs-meta">@Query</span>(<span class="hljs-string">&#x27;age&#x27;</span>) <span class="hljs-attr">age</span>: <span class="hljs-built_in">string</span>, <span class="hljs-meta">@Query</span>(<span class="hljs-string">&#x27;breed&#x27;</span>) <span class="hljs-attr">breed</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`查询年龄为 <span class="hljs-subst">$&#123;age&#125;</span>，品种为 <span class="hljs-subst">$&#123;breed&#125;</span> 的猫`</span>;<br>&#125;<br><br><span class="hljs-comment">// 或者整体接收</span><br><span class="hljs-meta">@Get</span>()<br><span class="hljs-title function_">filter</span>(<span class="hljs-params"><span class="hljs-meta">@Query</span>() <span class="hljs-attr">query</span>: &#123; age?: <span class="hljs-built_in">string</span>; breed?: <span class="hljs-built_in">string</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> query;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Node.js学习笔记</title>
    <link href="/2025/07/02/Node-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/07/02/Node-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js学习笔记"><a href="#Node-js学习笔记" class="headerlink" title="Node.js学习笔记"></a>Node.js学习笔记</h1><p>Node.js 是一个开源、跨平台的 JavaScript 运行时环境。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>适合IO密集型运算(libuv和cpp底层的功劳),不适合CPU密集型计算(单线程)，可用于前后端开发。</p><p>前端：Vue Angular React Nuxtjs</p><p>后端：</p><ol><li><p>Serverless</p></li><li><p>Web应用：Express,Nextjs,koa</p></li><li><p>RPC服务：gRPC</p></li><li><p>爬虫：Puppeteer</p></li><li><p>BFF层</p></li><li><p>及时性应用：Socket.io</p></li></ol><p>桌面端：</p><ol><li><p>Electron</p></li><li><p>Tauri</p></li><li><p>NW.js</p></li></ol><p>移动端：</p><ol><li><p>Weex</p></li><li><p>Ionic</p></li><li><p>React Native</p></li></ol><p>基建端：</p><ol><li><p>Webpack Vite</p></li><li><p>less scss</p></li><li><p>babel swc</p></li><li><p>inquire</p></li></ol><p>CI&#x2F;CD 反代 单元测试等都可以使用Node.js.</p><p><em>我靠,怎么Nodejs什么都能干啊!</em></p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><strong>npm</strong>是Nodejs的包管理工具。</p><h3 id="常用npm命令"><a href="#常用npm命令" class="headerlink" title="常用npm命令"></a>常用npm命令</h3><ol><li><p><code>npm init</code>:初始化空白包，创建package.json</p></li><li><p><code>npm run script</code>: 运行npm命令（需要在package.json定义）</p></li><li><p><code>npm install</code>:安装一个包或一组包,并会在当前目录存放一个<em>node_modules</em>,简写为<code>npm i ...</code></p></li><li><p><code>npm install &lt;package-name&gt; --save</code>:安装指定包,并将其添加到<code>package.json</code>,</p></li><li><p><code>npm uninstall &lt;package-name&gt;</code>:卸载指定包</p></li><li><p><code>npm config list</code> :查看Node npm版本,npm源,runtime目录等信息</p></li><li><p><code>npm config registry</code>:查看npm源</p></li><li><p><code>npm config set registry URLs</code>:设置npm源</p></li><li><p><code>npm login</code>:登录npm</p></li><li><p><code>npm publish</code>:将包发布到npm</p></li></ol><h3 id="关于package-json"><a href="#关于package-json" class="headerlink" title="关于package.json"></a>关于package.json</h3><ol><li><p><code>&quot;version&quot;:&quot;1.0.0&quot;</code></p><ul><li><p>第一位主版本号，针对重大更新或改动</p></li><li><p>第二位次版本号，针对功能更新</p></li><li><p>第三位修订号。针对bug修复</p></li></ul></li><li><p><code>&quot;scripts&quot;:&#123;...&#125;</code><br>运行npm命令</p></li><li><p><code>&quot;repository:&#123;...&#125;&quot;</code><br>设置仓库信息和地址</p></li><li><p><code>&quot;author&quot;:...</code><br>作者信息</p></li><li><p><code>&quot;license&quot;:...</code><br>项目许可证</p></li><li><p>关于”dependencies”</p><ol><li><p><code>&quot;devDependencies&quot;:&#123;...&#125;</code><br>开发所需的依赖，通过<code>npm i &lt;package-name&gt; -D</code>添加到package.json，例如<code>webpack</code>,<code>vite</code>,<code>rollup</code>等开发环境需要的依赖</p></li><li><p><code>&quot;dependencies:&#123;...&#125;&quot;</code><br>生产环境所需的依赖</p></li><li><p><code>&quot;peerDependencies&quot;:&#123;...&#125;</code><br>给插件编写人员或npm包的开发人员使用</p></li></ol></li></ol><h3 id="npm-install原理"><a href="#npm-install原理" class="headerlink" title="npm install原理"></a>npm install原理</h3><blockquote><p>首先安装的依赖都会存放在根目录的node_modules,默认采用扁平化的方式安装，并且排序规则.bin第一个然后@系列，再然后按照首字母排序abcd等，并且使用的算法是广度优先遍历，在遍历依赖树时，npm会首先处理项目根目录下的依赖，然后逐层处理每个依赖包的依赖，直到所有依赖都被处理完毕。在处理每个依赖时，npm会检查该依赖的版本号是否符合依赖树中其他依赖的版本要求，如果不符合，则会尝试安装适合的版本</p></blockquote><p>详细见:<a href="https://juejin.cn/post/7261119531891490877">Npm install原理</a></p><p><img src="/./Node-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/npm-install%E6%B5%81%E7%A8%8B.webp" title="流程图"></p><p>注意:</p><ol><li><p>如果项目中package.json与package-lock.json的依赖和版本不一致,则拉取package.json的依赖为准,并覆盖package-lock.json</p></li><li><p>npm install在检查npm config时,遵循项目级npmrc-&gt;用户级npmrc-&gt;全局npmrc-&gt;npm内置npmrc的顺序</p></li><li><p>package-lock.json中的”name”,”integrity”,”version”信息会生产一个key索引,用于比较本地的缓存</p></li></ol><h3 id="npm-run原理"><a href="#npm-run原理" class="headerlink" title="npm run原理"></a>npm run原理</h3><p><a href="https://juejin.cn/post/7261235534663368741">npm run原理</a></p><p>当前项目搜索是否存在<em>node&#x2F;modules&#x2F;.bin</em>,其次是全局,再其次是环境变量,如果没有就报错.</p><p>npm run也有生命周期,可以在package.json中的”scripts”设置”predev”和”postdev”参数执行相关文件.</p><h3 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h3><blockquote><p>npx是一个命令行工具，它是npm 5.2.0版本中新增的功能。它允许用户在不安装全局包的情况下，运行已安装在本地项目中的包或者远程仓库中的包。</p><p>npx的作用是在命令行中运行node包中的可执行文件，而不需要全局安装这些包。这可以使开发人员更轻松地管理包的依赖关系，并且可以避免全局污染的问题。它还可以帮助开发人员在项目中使用不同版本的包，而不会出现版本冲突的问题。</p></blockquote><p><strong>npx的作用</strong></p><ol><li><p>避免全局安装</p></li><li><p>总是使用最新版本</p></li><li><p>执行任意npm包</p></li><li><p>可以执行Github gist等公开的JavaScript文件</p></li></ol><h3 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h3><p><strong>步骤:</strong></p><ol><li><p>创建npm账号(注意是npm官方源)</p></li><li><p>登录npm账号</p></li><li><p><code>npm publish</code>发布</p></li></ol><h3 id="npm私服"><a href="#npm私服" class="headerlink" title="npm私服"></a>npm私服</h3><p>好处:</p><ul><li><p>可以离线使用,私有化部署</p></li><li><p>提供包的安全性,更好的管理包</p></li><li><p>提高包的下载速度</p></li></ul><p><strong>步骤:</strong></p><ol><li><p>安装verdaccio</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i verdaccio -g<br></code></pre></td></tr></table></figure></li><li><p>启动npm私服服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">verdaccio --listen 5000<br></code></pre></td></tr></table></figure></li><li><p>创建npm私服账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm adduser --registry http://localhost:5000/<br></code></pre></td></tr></table></figure></li><li><p>发布到npm私服</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm publish --registry http://localhost:5000/<br></code></pre></td></tr></table></figure></li></ol><p>注:如果已经设置好registry可以直接切换镜像然后更新</p><h2 id="Nodejs的模块化"><a href="#Nodejs的模块化" class="headerlink" title="Nodejs的模块化"></a>Nodejs的模块化</h2><p>Nodejs的模块化规范遵循两套:<strong><code>CommonJS</code></strong> 和 <strong><code>ESModules</code></strong></p><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>package.json中设置属性<code>&quot;type&quot;</code>为<code>&quot;commonjs&quot;</code></p><p><strong>五种模式</strong></p><ol><li><p>使用<code>require()</code>引入自己编写的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./test.js&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>引入第三方模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> md5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;md5&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>引入Nodejs内置模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;node:fs&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>引入C++扩展,addon,napi,node-gyp,.node等</p></li><li><p>引入Json文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./data.json&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><p>使用 <strong><code>module.exports</code></strong> 导出模块,也可使用ES6的解构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">success</span>:<span class="hljs-number">1</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ESModules规范"><a href="#ESModules规范" class="headerlink" title="ESModules规范"></a>ESModules规范</h3><p>package.json中设置属性<code>&quot;type&quot;</code>为<code>&quot;module&quot;</code></p><p><strong>导入:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span><br></code></pre></td></tr></table></figure><p>ESM不支持引入json,高版本可以强兼容但需要额外的断言且会报警</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> json <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.json&#x27;</span> assert &#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;json&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>导出:</strong></p><p><code>export default</code>只能有一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    success :<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>要查看某模块导出的所有内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> all <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(all)<br></code></pre></td></tr></table></figure><h3 id="CJS和ESM的区别"><a href="#CJS和ESM的区别" class="headerlink" title="CJS和ESM的区别"></a>CJS和ESM的区别</h3><ol><li><p>Cjs是基于<strong>运行时</strong>的同步加载,ESM是基于<strong>编译时</strong>的异步加载.一般来说,ESM下的import只能在作用域最顶层,若需要动态加载,可以使用import的函数模式(会返回一个Promise对象).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./test.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>CJs可以修改值,但ESM不行</p></li><li><p>Cjs不可以Tree Shaking,ESM可以</p></li><li><p>Cjs的顶层<code>this</code>指向模块本身,ESM顶层<code>this</code>指向<code>undefined</code></p></li></ol><h2 id="全局变量-全局API"><a href="#全局变量-全局API" class="headerlink" title="全局变量&amp;全局API"></a>全局变量&amp;全局API</h2><p>在浏览器环境下,可以使用<code>var</code>的关键词将全局变量绑定到<code>window</code>对象上,但是node并不是浏览器环境,因此不存在BOM和DOM,而且使用<code>var</code>定义全局变量也会导致状态提升的问题.</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在nodejs中使用global定义全局变量.在ECMA2020中可使用<code>globalThis</code>作为全局变量,可以自动切换.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">global</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;xxx&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h3><p>由于nodejs中没有DOM和BOM，除了这些API，其他的ECMAscriptAPI基本都能用,例如<code>setTimeout</code>,<code>Promise</code>,<code>Math</code>,<code>Console</code>等</p><h3 id="Nodejs专有API"><a href="#Nodejs专有API" class="headerlink" title="Nodejs专有API"></a>Nodejs专有API</h3><ol><li><p><strong><code>__dirname</code></strong><br>表示当前模块的所在目录的绝对路径,<strong>ESM模式下不可使用,可用process.cwd()代替</strong></p></li><li><p><strong><code>__filename</code></strong></p></li></ol><p>      表示当前模块文件的绝对路径，包括文件名和文件扩展名</p><blockquote><p><strong><code>__dirname</code>  <code>__filename</code> 只能在cjs使用 esm规范没有这两个全局变量</strong></p></blockquote><ol start="3"><li><p><strong><code>process</code></strong><br>处理进程相关的内容</p><ol><li><p><code>process.argv</code>: 这是一个包含命令行参数的数组。第一个元素是Node.js的执行路径，第二个元素是当前执行的JavaScript文件的路径，之后的元素是传递给脚本的命令行参数。 </p></li><li><p><code>process.env</code>: 这是一个包含当前环境变量的对象。您可以通过<code>process.env</code>访问并操作环境变量。</p></li><li><p><code>process.cwd()</code>: 这个方法返回当前工作目录的路径。</p></li><li><p><code>process.on(event, listener)</code>: 用于注册事件监听器。您可以使用<code>process.on</code>监听诸如<code>exit</code>、<code>uncaughtException</code>等事件，并在事件发生时执行相应的回调函数。      </p></li><li><p><code>process.exit([code])</code>: 用于退出当前的Node.js进程。您可以提供一个可选的退出码作为参数。</p></li><li><p><code>process.pid</code>: 这个属性返回当前进程的PID（进程ID）。</p></li></ol><p>这些只是<code>process</code>对象的一些常用属性和方法，还有其他许多属性和方法可用于监控进程、设置信号处理、发送IPC消息等。<br>需要注意的是，<code>process</code>对象是一个全局对象，可以在任何模块中直接访问，无需导入或定义。</p></li><li><p><strong><code>Buffer</code></strong></p><ol><li>创建 <code>Buffer</code> 实例：</li></ol><ul><li><code>Buffer.alloc(size[, fill[, encoding]])</code>: 创建一个指定大小的新的<code>Buffer</code>实例，初始内容为零。<code>fill</code>参数可用于填充缓冲区，<code>encoding</code>参数指定填充的字符编码。</li><li><code>Buffer.from(array)</code>: 创建一个包含给定数组的<code>Buffer</code>实例。</li><li><code>Buffer.from(string[, encoding])</code>: 创建一个包含给定字符串的<code>Buffer</code>实例。</li></ul><ol start="2"><li>读取和写入数据：</li></ol><ul><li><code>buffer[index]</code>: 通过索引读取或写入<code>Buffer</code>实例中的特定字节。</li><li><code>buffer.length</code>: 获取<code>Buffer</code>实例的字节长度。</li><li><code>buffer.toString([encoding[, start[, end]]])</code>: 将<code>Buffer</code>实例转换为字符串。</li></ul><ol start="3"><li>转换数据：</li></ol><ul><li><code>buffer.toJSON()</code>: 将Buffer实例转换为JSON对象。</li><li><code>buffer.slice([start[, end]])</code>: 返回一个新的Buffer实例，其中包含原始Buffer实例的部分内容。</li></ul><ol start="4"><li>其他：</li></ol><ul><li><code>Buffer.isBuffer(obj)</code>: 检查一个对象是否是Buffer实例。</li><li><code>Buffer.concat(list[, totalLength])</code>: 将一组Buffer实例或字节数组连接起来形成一个新的Buffer实例。</li></ul></li></ol><h2 id="CSR-SSR-SEO"><a href="#CSR-SSR-SEO" class="headerlink" title="CSR SSR SEO"></a>CSR SSR SEO</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在node环境下无法直接操作DOM和BOM,可以通过<code>jsdom</code>实现,模拟浏览器的环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable constant_">JSDOM</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsdom&#x27;</span>)<br><br><span class="hljs-keyword">const</span> dom = <span class="hljs-keyword">new</span> <span class="hljs-title function_">JSDOM</span>(<span class="hljs-string">`&lt;!DOCTYPE html&gt;&lt;div id=&#x27;app&#x27;&gt;&lt;/div&gt;`</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable language_">document</span> = dom.<span class="hljs-property">window</span>.<span class="hljs-property">document</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-variable language_">window</span> = dom.<span class="hljs-property">window</span><br><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.thecatapi.com/v1/images/search?limit=10&amp;page=1&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>)<br>    data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>       <span class="hljs-keyword">const</span> img =  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br>       img.<span class="hljs-property">src</span> = item.<span class="hljs-property">url</span><br>       img.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;200px&#x27;</span><br>       img.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&#x27;200px&#x27;</span><br>       app.<span class="hljs-title function_">appendChild</span>(img)<br>    &#125;)<br>    fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">&#x27;./index.html&#x27;</span>, dom.<span class="hljs-title function_">serialize</span>())<br>&#125;)<br><br><br></code></pre></td></tr></table></figure><h3 id="CSR-SSR"><a href="#CSR-SSR" class="headerlink" title="CSR&#x2F;SSR"></a>CSR&#x2F;SSR</h3><p>我们上面的操作属于SSR <code>（Server-Side Rendering）</code>服务端渲染请求数据和拼装都在服务端完成，而我们的Vue,react 等框架这里不谈(nuxtjs,nextjs)，是在客户端完成渲染拼接的属于CSR<code>（Client-Side Rendering）</code>客户端渲染.</p><p>CSR 和 SSR 区别</p><ol><li><p>页面加载方式：</p><ul><li>CSR：在 CSR 中，服务器返回一个初始的 HTML 页面，然后浏览器下载并执行 JavaScript 文件，JavaScript 负责动态生成并更新页面内容。这意味着初始页面加载时，内容较少，页面结构和样式可能存在一定的延迟。</li><li>SSR：在 SSR 中，服务器在返回给浏览器之前，会预先在服务器端生成完整的 HTML 页面，包含了初始的页面内容。浏览器接收到的是已经渲染好的 HTML 页面，因此初始加载的速度较快。</li></ul></li><li><p>内容生成和渲染：</p><ul><li>CSR：在 CSR 中，页面的内容生成和渲染是由客户端的 JavaScript 脚本负责的。当数据变化时，JavaScript 会重新生成并更新 DOM，从而实现内容的动态变化。这种方式使得前端开发更加灵活，可以创建复杂的交互和动画效果。</li><li>SSR：在 SSR 中，服务器在渲染页面时会执行应用程序的代码，并生成最终的 HTML 页面。这意味着页面的初始内容是由服务器生成的，对于一些静态或少变的内容，可以提供更好的首次加载性能。</li></ul></li><li><p>用户交互和体验：</p><ul><li>CSR：在 CSR 中，一旦初始页面加载完成，后续的用户交互通常是通过 AJAX 或 WebSocket 与服务器进行数据交互，然后通过 JavaScript 更新页面内容。这种方式可以提供更快的页面切换和响应速度，但对于搜索引擎爬虫和 SEO（搜索引擎优化）来说，可能需要一些额外的处理。</li><li>SSR：在 SSR 中，由于页面的初始内容是由服务器生成的，因此用户交互可以直接在服务器上执行，然后服务器返回更新后的页面。这样可以提供更好的首次加载性能和对搜索引擎友好的内容。</li></ul></li></ol><p>CSR 应用例如 ToB 后台管理系统 大屏可视化 都可以采用CSR渲染不需要很高的SEO支持</p><p>SSR 应用例如 内容密集型应用大部分是ToC 新闻网站 ，博客网站，电子商务，门户网站需要更高的SEO支持</p><h2 id="Path-路径模块"><a href="#Path-路径模块" class="headerlink" title="Path-路径模块"></a>Path-路径模块</h2><blockquote><p>path模块在不同的操作系统是有差异的(Windows&#x2F;POSIX)</p></blockquote><h3 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h3><p>Unix,like-unix,macOS,Linux,WSL都遵循POSIX标准,使用正斜杠<code>/</code></p><h3 id="Win32"><a href="#Win32" class="headerlink" title="Win32"></a>Win32</h3><p>使用双反斜杠<code>\\</code></p><h3 id="兼容性处理方法"><a href="#兼容性处理方法" class="headerlink" title="兼容性处理方法"></a>兼容性处理方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-property">win32</span>.<span class="hljs-title function_">basename</span>(<span class="hljs-string">&#x27;\\foo\\bar\\baz\\xm.html&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="Path模块常用方法"><a href="#Path模块常用方法" class="headerlink" title="Path模块常用方法"></a>Path模块常用方法</h3><ol><li><p><code>basename</code> :返回给定路径的文件名(含文件扩展名)</p></li><li><p><code>dirname</code>:返回路径的目录名</p></li><li><p><code>extname</code>:返回路径的扩展名(带点,形如<code>.html</code>)<br><em>如果没有,返回空字符串;如果有多个点,返回最后一个点后面的内容</em></p></li><li><p><code>path.join(params)</code>:将多个路径字符串合并为一个字符串</p></li><li><p><code>path.resolve(params)</code>:解析路径,返回绝对路径;若有多个路径参数则返回最后一个;若只有一个相对路径,返回当前工作目录的绝对路径.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;/a&#x27;</span>))<br><span class="hljs-comment">// D:\a</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./index.js&#x27;</span>))<br><span class="hljs-comment">// D:\Project\Program\Node\index.js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;D:/Project/Program/Node&#x27;</span>,<span class="hljs-string">&#x27;./node_modules&#x27;</span>,<span class="hljs-string">&#x27;./.bin/tldts&#x27;</span>))<br><span class="hljs-comment">// D:\Project\Program\Node\node_modules\.bin\tldts</span><br></code></pre></td></tr></table></figure></li><li><p><code>path.parse()</code>:解析路径,返回对象</p></li><li><p><code>path.format()</code>:根据传入的对象解析路径</p></li></ol><h2 id="OS-系统模块"><a href="#OS-系统模块" class="headerlink" title="OS-系统模块"></a>OS-系统模块</h2><p>OS模块主要是和操作系统交互的模块</p><table><thead><tr><th>序号</th><th>API</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td><strong>os.type()</strong></td><td>它在 Linux 上返回 <code>&#39;Linux&#39;</code>，在 macOS 上返回 <code>&#39;Darwin&#39;</code>，在 Windows 上返回 <code>&#39;Windows_NT&#39;</code></td></tr><tr><td>2</td><td><strong>os.platform()</strong></td><td>返回标识为其编译 Node.js 二进制文件的操作系统平台的字符串。 该值在编译时设置。 可能的值为 <code>&#39;aix&#39;</code>、<code>&#39;darwin&#39;</code>、<code>&#39;freebsd&#39;</code>、<code>&#39;linux&#39;</code>、<code>&#39;openbsd&#39;</code>、<code>&#39;sunos&#39;</code>、以及 <code>&#39;win32&#39;</code></td></tr><tr><td>3</td><td><strong>os.release()</strong></td><td>返回操作系统的版本例如10.xxxx win10</td></tr><tr><td>4</td><td><strong>os.homedir()</strong></td><td>返回用户目录 例如c:\user\xiaoman 原理就是 windows <code>echo %USERPROFILE%</code> posix $HOME</td></tr><tr><td>5</td><td><strong>os.arch()</strong></td><td>返回cpu的架构 可能的值为 <code>&#39;arm&#39;</code>、<code>&#39;arm64&#39;</code>、<code>&#39;ia32&#39;</code>、<code>&#39;mips&#39;</code>、<code>&#39;mipsel&#39;</code>、<code>&#39;ppc&#39;</code>、<code>&#39;ppc64&#39;</code>、<code>&#39;s390&#39;</code>、<code>&#39;s390x&#39;</code>、以及 <code>&#39;x64&#39;</code></td></tr><tr><td>6</td><td><strong>os.cpus()</strong></td><td>返回CPU的线程及详细信息</td></tr><tr><td>7</td><td><strong>os.networkInterfaces()</strong></td><td>返回网络信息</td></tr></tbody></table><h2 id="Process-进程模块"><a href="#Process-进程模块" class="headerlink" title="Process-进程模块"></a>Process-进程模块</h2><ol><li><p><code>process.arch()</code>:返回操作系统CPU架构</p></li><li><p><code>process.cwd()</code>:返回当前的工作目录,可代替<code>__dirname</code>使用</p></li><li><p><code>process.argv()</code>:获取执行进程后面的参数 返回是一个数组 后面我们讲到命令行交互工具的时候会很有用，各种cli脚手架也是使用这种方式接受配置参数例如webpack</p></li><li><p><code>process.memoryUsage()</code>:用于获取当前进程的内存使用情况。该方法返回一个对象，其中包含了各种内存使用指标，如 rss（Resident Set Size，常驻集大小）、heapTotal（堆区总大小）、heapUsed（已用堆大小）和 external（外部内存使用量）等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">rss</span>: <span class="hljs-number">30932992</span>, <span class="hljs-comment">// 常驻集大小 这是进程当前占用的物理内存量，不包括共享内存和页面缓存。它反映了进程实际占用的物理内存大小</span><br>    <span class="hljs-attr">heapTotal</span>: <span class="hljs-number">6438912</span>, <span class="hljs-comment">//堆区总大小 这是 V8 引擎为 JavaScript 对象分配的内存量。它包括了已用和未用的堆内存</span><br>    <span class="hljs-attr">heapUsed</span>: <span class="hljs-number">5678624</span>,  <span class="hljs-comment">//已用堆大小</span><br>    <span class="hljs-attr">external</span>: <span class="hljs-number">423221</span>, <span class="hljs-comment">//外部内存使用量 这部分内存不是由 Node.js 进程直接分配的，而是由其他 C/C++ 对象或系统分配的</span><br>    <span class="hljs-attr">arrayBuffers</span>: <span class="hljs-number">17606</span> <span class="hljs-comment">//是用于处理二进制数据的对象类型，它使用了 JavaScript 中的 ArrayBuffer 接口。这个属性显示了当前进程中 ArrayBuffers 的数量</span><br>  &#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>process.exit()</code>:退出进程</p></li><li><p><code>process.kill(pid)</code>:杀死进程</p></li><li><p><code>process.env()</code>:获取或修改当前操作系统的环境变量,但修改只在当前进程生效,不会真正影响系统的环境变量.</p></li></ol><p><strong>注:</strong> 可以使用第三方库<code>cross-env</code>实现环境变量的切换</p><h2 id="child-process-子进程模块"><a href="#child-process-子进程模块" class="headerlink" title="child_process-子进程模块"></a>child_process-子进程模块</h2><ol><li><p><code>exec(&#39;command&#39;,(err,stdout,stderr)=&gt;&#123;&#125;)</code>在shell执行命令,异步方法,有回调函数,<code>stdout</code>是输出,<code>stderr</code>是错误信息.</p></li><li><p><code>execSync()</code>:功能同上,但是同步方法,不需要回调函数.</p></li><li><p><code>spawn()</code>:执行命令(shell命令无上限,返回流,实时返回)</p></li><li><p><code>spawnSync()</code>:执行命令(同步方法)<br>cwd &lt;string&gt; 子进程的当前工作目录。<br>env &lt;Object&gt; 环境变量键值对。<br>encoding &lt;string&gt; 默认为 ‘utf8’。<br>shell &lt;string&gt; 用于执行命令的 shell。 在 UNIX 上默认为 ‘&#x2F;bin&#x2F;sh’，在 Windows 上默认为 process.env.ComSpec。 详见 Shell Requirements 与 Default Windows Shell。<br>timeout &lt;number&gt; 默认为 0。<br>maxBuffer &lt;number&gt; stdout 或 stderr 允许的最大字节数。 默认为 200*1024。 如果超过限制，则子进程会被终止。 查看警告： maxBuffer and Unicode。<br>killSignal &lt;string&gt; | &lt;integer&gt; 默认为 ‘SIGTERM’。<br>uid &lt;number&gt; 设置该进程的用户标识。（详见 setuid(2)）<br>gid &lt;number&gt; 设置该进程的组标识。（详见 setgid(2)）</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;spawn&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br><br><span class="hljs-keyword">const</span> &#123;stdout&#125; = <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;netstat&#x27;</span>)<br><br>stdout.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">msg</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg.<span class="hljs-title function_">toString</span>())<br>&#125;)<br><br>stdout.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">msg</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;End&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li><code>execFile()</code>执行脚本文件</li><li><code>execFileSync()</code>:同上,同步方法</li><li><code>fork()</code>:创建子进程,但仅限于js模块,父子进程可相互通信</li></ol><h2 id="Events-事件模块"><a href="#Events-事件模块" class="headerlink" title="Events-事件模块"></a>Events-事件模块</h2><p>Node.js核心API都采用异步事件驱动架构,通过有效的方法监听事件状态的变化,在变化时做出相应的动作.</p><h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><p><code>发布-订阅设计模式</code></p><img title="" src="./Node-js学习笔记/re-sub.webp" alt=""><p>当一个发布者有新消息时，就将这个消息发布到调度中心。调度中心就会将这个消息通知给所有订阅者。这就实现了发布者和订阅者之间的解耦，发布者和订阅者不再直接依赖于彼此，他们可以独立地扩展自己.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> eventEmitter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>)<br><br><span class="hljs-comment">// 发布订阅模式 off on emit once</span><br><br><span class="hljs-keyword">const</span> bus = <span class="hljs-keyword">new</span> <span class="hljs-title function_">eventEmitter</span>()<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">name</span>)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br>&#125;<br><br><br><span class="hljs-comment">//订阅一个事件</span><br>bus.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;test&#x27;</span>,fn)<br><span class="hljs-comment">//移除一个事件订阅</span><br>bus.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;test&#x27;</span>,fn)<br><span class="hljs-comment">//仅执行一次</span><br>bus.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;testonce&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Only run once.&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">//发布事件</span><br>bus.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&quot;xm&quot;</span>)<br><br>bus.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;testonce&#x27;</span>)<br>bus.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;testonce&#x27;</span>)<br></code></pre></td></tr></table></figure><p>监听消息数量默认是<strong>10</strong>个,可以通过调用<code>setMaxListeners</code>传入数量.</p><h2 id="Util-工具模块"><a href="#Util-工具模块" class="headerlink" title="Util-工具模块"></a>Util-工具模块</h2><p>util是Nodejs内部提供的实用工具类API.</p><ol><li><strong><code>util.promisify()</code></strong> :将回调函数包装为Promise类型</li></ol><p><em>注:</em> 如果有多个返回值,res为js对象;若只有一个返回值,res即是本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; exec &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:child_process&#x27;</span><br><span class="hljs-keyword">import</span> util <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:util&#x27;</span><br><br><span class="hljs-keyword">const</span> execPromise = util.<span class="hljs-title function_">promisify</span>(exec)<br><br><span class="hljs-title function_">execPromise</span>(<span class="hljs-string">&#x27;node -v&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res,<span class="hljs-string">&#x27;res&#x27;</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err,<span class="hljs-string">&#x27;err&#x27;</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure><ol start="2"><li><strong><code>util.callbackify</code></strong> :将promise类型的方法变成 回调函数。</li><li><strong><code>util.format</code></strong>:输入格式化<ul><li><code>%s</code>: <code>String</code> 将用于转换除 <code>BigInt</code>、<code>Object</code> 和 <code>-0</code> 之外的所有值。 <code>BigInt</code> 值将用 <code>n</code> 表示，没有用户定义的 <code>toString</code> 函数的对象使用具有选项 <code>&#123; depth: 0, colors: false, compact: 3 &#125;</code> 的 <code>util.inspect()</code> 进行检查。</li><li><code>%d</code>: <code>Number</code> 将用于转换除 <code>BigInt</code> 和 <code>Symbol</code> 之外的所有值。</li><li><code>%i</code>: <code>parseInt(value, 10)</code> 用于除 <code>BigInt</code> 和 <code>Symbol</code> 之外的所有值。</li><li><code>%f</code>: <code>parseFloat(value)</code> 用于除 <code>Symbol</code> 之外的所有值。</li><li><code>%j</code>: JSON。 如果参数包含循环引用，则替换为字符串 <code>&#39;[Circular]&#39;</code>。</li><li><code>%o</code>: <code>Object</code>. 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于具有选项 <code>&#123; showHidden: true, showProxy: true &#125;</code> 的 <code>util.inspect()</code>。 这将显示完整的对象，包括不可枚举的属性和代理。</li><li><code>%O</code>: <code>Object</code>. 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于没有选项的 <code>util.inspect()</code>。 这将显示完整的对象，但不包括不可枚举的属性和代理。</li><li><code>%c</code>: <code>CSS</code>. 此说明符被忽略，将跳过任何传入的 CSS。</li><li><code>%%</code>: 单个百分号 (<code>&#39;%&#39;</code>)。 这不消费参数。</li></ul></li></ol><h2 id="Fs-文件模块"><a href="#Fs-文件模块" class="headerlink" title="Fs-文件模块"></a>Fs-文件模块</h2><h3 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1. 读取文件"></a>1. 读取文件</h3><p>  <code>fs.readFile()</code>:异步方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs&#x27;</span>)<br><br><span class="hljs-comment">// 异步方法</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>,&#123;<br>    <span class="hljs-attr">encoding</span>:<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>    <span class="hljs-attr">flag</span>:<span class="hljs-string">&#x27;r&#x27;</span><br>&#125;,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">throw</span> err<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;)<br><br><br></code></pre></td></tr></table></figure><p><code>fs.readFileSync()</code>:同步方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs&#x27;</span>)<br><br><span class="hljs-comment">// 同步方法,会导致代码阻塞</span><br><span class="hljs-keyword">const</span> res = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>)<br><span class="hljs-comment">// sync方法的返回值都是buffer流,需要toString方法处理后才能得到原始值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-title function_">toString</span>())<br></code></pre></td></tr></table></figure><p><code>fs2.readFile().then()</code>:Promise包装方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs/promises&#x27;</span>)<br><br><span class="hljs-comment">//Promise方法</span><br>fs2.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>fs.createReadStream()</code>:流式读取文件(适合大文件)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//流式读取-大文件处理</span><br><br><span class="hljs-keyword">const</span> readStream = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>)<br><br>readStream.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">chunk</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chunk.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>&#125;)<br><br>readStream.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;读取完成&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-文件夹操作"><a href="#2-文件夹操作" class="headerlink" title="2. 文件夹操作"></a>2. 文件夹操作</h3><p><code>fs.mkdirSync()</code>:创建文件夹,<code>recursive:true</code>允许多层文件夹嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建文件夹</span><br>fs.<span class="hljs-title function_">mkdirSync</span>(<span class="hljs-string">&#x27;./works/native&#x27;</span>,&#123;<br>    <span class="hljs-attr">recursive</span>:<span class="hljs-literal">true</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><code>fs.rmdirSync()</code>:删除文件夹,若要删除单文件可用<code>fs.rmSync()</code></p><h3 id="3-重命名"><a href="#3-重命名" class="headerlink" title="3.重命名"></a>3.重命名</h3><p><code>fs.renameSync(&#39;old&#39;,&#39;new&#39;)</code>:重命名文件</p><h3 id="4-文件监听"><a href="#4-文件监听" class="headerlink" title="4.文件监听"></a>4.文件监听</h3><p><code>fs.watch(filePath,(event,filename)=&gt;&#123;&#125;)</code>:监听文件事件变化 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">watchFile</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event,filename</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filename)<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>fs.watchFile(filePath,(cur,pre)=&gt;&#123;&#125;)</code>:监听文件的元数据信息变化</p><h3 id="5-写入文件"><a href="#5-写入文件" class="headerlink" title="5.写入文件"></a>5.写入文件</h3><p><code>fs.writeFileSync(fileName,contentString)</code>:向指定路径下文件写入内容(默认覆盖方法)</p><p><em>注:</em>,第三个参数<code>&#123;flag:&#39;a&#39;&#125;</code>表示追加,<code>fs.appendFileSync()</code>也可实现相同功能</p><ul><li><p><code>&#39;a&#39;</code>: 打开文件进行追加。 如果文件不存在，则创建该文件。</p></li><li><p><code>&#39;ax&#39;</code>: 类似于 <code>&#39;a&#39;</code> 但如果路径存在则失败。</p></li><li><p><code>&#39;a+&#39;</code>: 打开文件进行读取和追加。 如果文件不存在，则创建该文件。</p></li><li><p><code>&#39;ax+&#39;</code>: 类似于 <code>&#39;a+&#39;</code> 但如果路径存在则失败。</p></li><li><p><code>&#39;as&#39;</code>: 以同步模式打开文件进行追加。 如果文件不存在，则创建该文件。</p></li><li><p><code>&#39;as+&#39;</code>: 以同步模式打开文件进行读取和追加。 如果文件不存在，则创建该文件。</p></li><li><p><code>&#39;r&#39;</code>: 打开文件进行读取。 如果文件不存在，则会发生异常。</p></li><li><p><code>&#39;r+&#39;</code>: 打开文件进行读写。 如果文件不存在，则会发生异常。</p></li><li><p><code>&#39;rs+&#39;</code>: 以同步模式打开文件进行读写。 指示操作系统绕过本地文件系统缓存。<br>这主要用于在 NFS 挂载上打开文件，因为它允许跳过可能过时的本地缓存。 它对 I&#x2F;O 性能有非常实际的影响，因此除非需要，否则不建议使用此标志。<br>这不会将 <code>fs.open()</code> 或 <code>fsPromises.open()</code> 变成同步阻塞调用。 如果需要同步操作，应该使用类似 <code>fs.openSync()</code> 的东西。</p></li><li><p><code>&#39;w&#39;</code>: 打开文件进行写入。 创建（如果它不存在）或截断（如果它存在）该文件。</p></li><li><p><code>&#39;wx&#39;</code>: 类似于 <code>&#39;w&#39;</code> 但如果路径存在则失败。</p></li><li><p><code>&#39;w+&#39;</code>: 打开文件进行读写。 创建（如果它不存在）或截断（如果它存在）该文件。</p></li><li><p><code>&#39;wx+&#39;</code>: 类似于 <code>&#39;w+&#39;</code> 但如果路径存在则失败。</p></li></ul><p><code>fs.createWriteStream(filePath)</code>:创建可写流,适合大量数据的写入.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs&#x27;</span>)<br><span class="hljs-keyword">const</span> verse = [<br>    <span class="hljs-string">&#x27;你若三冬来&#x27;</span>,<br>    <span class="hljs-string">&#x27;换我一城雪白&#x27;</span>,<br>    <span class="hljs-string">&#x27;相思风中开&#x27;</span>,<br>]<br><span class="hljs-keyword">const</span> writeStream = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>)<br><br>verse.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>    writeStream.<span class="hljs-title function_">write</span>(item + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>&#125;)<br><br>writeStream.<span class="hljs-title function_">end</span>()<br></code></pre></td></tr></table></figure><h3 id="6-软连接-硬链接"><a href="#6-软连接-硬链接" class="headerlink" title="6.软连接&#x2F;硬链接"></a>6.软连接&#x2F;硬链接</h3><p><code>fs.linkSync(filePath,newFilePath)</code>:创建硬链接文件,类似共享文件,可用于文件备份</p><p><code>fs.symlinkSync(filePath,newFilePath)</code>:创建硬链接,类似win的快捷方式,源文件删除后无效.</p><h2 id="Zlib-解压缩"><a href="#Zlib-解压缩" class="headerlink" title="Zlib-解压缩"></a>Zlib-解压缩</h2><p>在 Node.js 中，<code>zlib</code> 模块提供了对数据压缩和解压缩的功能，以便在应用程序中减少数据的传输大小和提高性能。该模块支持多种压缩算法，包括 Deflate、Gzip 和 Raw Deflate。</p><p>Gzip流式压缩:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> zlib = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:zlib&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> readStream = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>)<br><span class="hljs-keyword">const</span> writeStream = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;./index.txt.gz&#x27;</span>) <span class="hljs-comment">//gz后缀</span><br>readStream.<span class="hljs-title function_">pipe</span>(zlib.<span class="hljs-title function_">createGzip</span>()).<span class="hljs-title function_">pipe</span>(writeStream)<br></code></pre></td></tr></table></figure><p>Gzip流式解压:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> zlib = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:zlib&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> readStream = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>)<br><span class="hljs-keyword">const</span> writeStream = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;./index.txt.gz&#x27;</span>) <span class="hljs-comment">//gz后缀</span><br>readStream.<span class="hljs-title function_">pipe</span>(zlib.<span class="hljs-title function_">createGunzip</span>()).<span class="hljs-title function_">pipe</span>(writeStream)<br></code></pre></td></tr></table></figure><p>Defalte同理,改为<code>createDefalte()</code>压缩,<code>createInfalte()</code>解压即可.</p><p>Gzip文件解压:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> zlib = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:zlib&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:fs&#x27;</span>)<br><br><br><span class="hljs-keyword">let</span> content = <span class="hljs-string">&#x27;...&#x27;</span><br><span class="hljs-keyword">const</span> res = zlib.<span class="hljs-title function_">gzipSync</span>() <span class="hljs-comment">//同步方法</span><br></code></pre></td></tr></table></figure><h2 id="Http-http服务"><a href="#Http-http服务" class="headerlink" title="Http-http服务"></a>Http-http服务</h2><p>“http” 模块是 Node.js 中用于创建和处理 HTTP 服务器和客户端的核心模块。它使得构建基于 HTTP 协议的应用程序变得更加简单和灵活。</p><ol><li>创建 Web 服务器：你可以使用 “http” 模块创建一个 HTTP 服务器，用于提供 Web 应用程序或网站。通过监听特定的端口，服务器可以接收客户端的请求，并生成响应。你可以处理不同的路由、请求方法和参数，实现自定义的业务逻辑。</li><li>构建 RESTful API：”http” 模块使得构建 RESTful API 变得简单。你可以使用 HTTP 请求方法（如 GET、POST、PUT、DELETE 等）和路径来定义 API 的不同端点。通过解析请求参数、验证身份和权限，以及生成相应的 JSON 或其他数据格式，你可以构建强大的 API 服务。</li><li>代理服务器：”http” 模块还可以用于创建代理服务器，用于转发客户端的请求到其他服务器。代理服务器可以用于负载均衡、缓存、安全过滤或跨域请求等场景。通过在代理服务器上添加逻辑，你可以对请求和响应进行修改、记录或过滤。</li><li>文件服务器：”http” 模块可以用于创建一个简单的文件服务器，用于提供静态文件（如 HTML、CSS、JavaScript、图像等）。通过读取文件并将其作为响应发送给客户端，你可以轻松地构建一个基本的文件服务器。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:http&#x27;</span>); <span class="hljs-comment">// 引入 http 模块</span><br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node:url&#x27;</span>); <span class="hljs-comment">// 引入 url 模块</span><br><br><span class="hljs-comment">// 创建 HTTP 服务器，并传入回调函数用于处理请求和生成响应</span><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; pathname, query &#125; = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 解析请求的 URL，获取路径和查询参数</span><br><br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123; <span class="hljs-comment">// 检查请求方法是否为 POST</span><br>    <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/post&#x27;</span>) &#123; <span class="hljs-comment">// 检查路径是否为 &#x27;/post&#x27;</span><br>      <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;&#x27;</span>;<br>      req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>        data += chunk; <span class="hljs-comment">// 获取 POST 请求的数据</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>      &#125;);<br>      req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/json&#x27;</span>); <span class="hljs-comment">// 设置响应头的 Content-Type 为 &#x27;application/json&#x27;</span><br>        res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">200</span>; <span class="hljs-comment">// 设置响应状态码为 200</span><br>        res.<span class="hljs-title function_">end</span>(data); <span class="hljs-comment">// 将获取到的数据作为响应体返回</span><br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/json&#x27;</span>); <span class="hljs-comment">// 设置响应头的 Content-Type 为 &#x27;application/json&#x27;</span><br>      res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span>; <span class="hljs-comment">// 设置响应状态码为 404</span><br>      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Not Found&#x27;</span>); <span class="hljs-comment">// 返回 &#x27;Not Found&#x27; 作为响应体</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123; <span class="hljs-comment">// 检查请求方法是否为 GET</span><br>    <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/get&#x27;</span>) &#123; <span class="hljs-comment">// 检查路径是否为 &#x27;/get&#x27;</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(query.<span class="hljs-property">a</span>); <span class="hljs-comment">// 打印查询参数中的键名为 &#x27;a&#x27; 的值</span><br>      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;get success&#x27;</span>); <span class="hljs-comment">// 返回 &#x27;get success&#x27; 作为响应体</span><br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">98</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server is running on port 98&#x27;</span>); <span class="hljs-comment">// 打印服务器启动的信息</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><p>Http请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">http://localhost:98/post/xxx</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">&#123;</span><br><span class="language-pgsql">     &quot;name&quot;:&quot;小满zs&quot;</span><br><span class="language-pgsql">&#125;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">GET</span> http://localhost:<span class="hljs-number">98</span>/<span class="hljs-keyword">get</span>?a=<span class="hljs-number">1</span>&amp;b=<span class="hljs-number">2</span> HTTP/<span class="hljs-number">1.1</span></span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法</title>
    <link href="/2025/06/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2025/06/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与分类"><a href="#数据结构与分类" class="headerlink" title="数据结构与分类"></a>数据结构与分类</h1><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><ul><li><strong>线性数据结构:</strong> 数组、链表、栈、队列、哈希表，元素之间是一对一的顺序关系。</li><li><strong>非线性数据结构：</strong> 树、堆、图、哈希表。</li></ul><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><ul><li><p><strong>连续储存空间:</strong> 栈、队列、哈希表、树、堆、图、矩阵、张量（维度<br> 的数组）等。</p></li><li><p><strong>分散储存空间:</strong> 栈、队列、哈希表、树、堆、图等。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用户中心系统开发日志</title>
    <link href="/2025/04/09/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    <url>/2025/04/09/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="用户中心项目"><a href="#用户中心项目" class="headerlink" title="用户中心项目"></a>用户中心项目</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>做出管理系统</p><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p> 需求分析 -&gt; 设计（概要设计，详细设计） -&gt; 技术选型 -&gt; 初始化&#x2F;引入需要的技术 -&gt; 写demo -&gt; 写代码（实现业务测试） -&gt; 测试（单元测试）-&gt;代码提交&#x2F;代码评审 -&gt; 部署&#x2F;发布</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>登陆注册</li><li>用户管理（仅管理员可见） 对用户的查询或者修改</li><li>用户校验（仅社团成员）</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>前端： 三件套 + React + Antd + Umi + AntDesignPro<br>后端：Java + Spring三件套 + Mybatis + Mybatis-plus + mysql<br>部署：服务器&#x2F;容器</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ol><li><p>项目初始化</p><ol><li>前端初始化<ol><li>初始化项目</li><li>引入组件</li><li>框架介绍 瘦身</li></ol></li><li>后端初始化<ol><li>准备环境（MySql）</li><li>引入框架（整合框架）</li></ol></li></ol></li><li><p><strong>登录&#x2F;注册</strong></p><ol><li>前端</li><li>后端<ol><li><p>规整目录</p></li><li><p>实现基本数据库操作</p><ol><li>模型User对象与数据库字段的关联，自动生成(Jetbrains插件Mybatis-X实现)</li></ol><p> <strong>注意：</strong><br> 在maven中配置lombok时，需要在jetbrains安装对应插件并启用注解处理器，并在pom.xml中<strong>手动写入指定版本号</strong>，否则执行model单元测试会报错<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.36<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.36<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure></p></li></ol></li></ol></li><li><p>用户管理</p><ol><li>前端</li><li>后端</li></ol></li></ol><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>数据表：可以理解为excel表格<br>java操作数据库-&gt;代替人工</p><h3 id="什么是设计数据库表"><a href="#什么是设计数据库表" class="headerlink" title="什么是设计数据库表"></a>什么是设计数据库表</h3><p>有哪些表？ 表中有哪些字段？字段类型？数据库字段添加索引？表与表之间的关联</p><p>*设计：*原则上不能在数据库内硬删除表格对象，而是采用isDelete的”逻辑删除”</p><p><strong>用户表：</strong></p><p>id (主键) bigint<br>username （昵称） varchar<br>userAccount (登陆账号) bigint<br>avatarUrl(头像) varchar<br>gender (性别) tinyint<br>userpassword （密码）varchar<br>phone (电话) varchar<br>email (邮箱) varchar<br>userStatus(账户状态) int(0&#x2F;1&#x2F;2)</p><p>createTime(创建时间) (数据插入时间) datetime<br>updateTime(更新时间) (数据更新时间) datetime<br>isDelete(逻辑删除) tinyint</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> <span class="hljs-keyword">user</span><br>(<br>    id           <span class="hljs-type">bigint</span>                              <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;id&#x27;</span>,<br>    username     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                        <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>    userAccount  <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                        <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户账号&#x27;</span>,<br>    avatarUrl    <span class="hljs-type">varchar</span>(<span class="hljs-number">2048</span>)                       <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户头像&#x27;</span>,<br>    gender       tinyint                             <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;性别&#x27;</span>,<br>    userPassword <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                        <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    phone        <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                        <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;电话号码&#x27;</span>,<br>    email        <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                        <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;电子邮箱&#x27;</span>,<br>    userStatus   <span class="hljs-type">int</span>       <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;用户状态(0正常)&#x27;</span>,<br>    createTime   <span class="hljs-type">timestamp</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime   <span class="hljs-type">timestamp</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete     tinyint   <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;用户&#x27;</span>;<br><br></code></pre></td></tr></table></figure><h2 id="注册逻辑"><a href="#注册逻辑" class="headerlink" title="注册逻辑"></a>注册逻辑</h2><ol><li>用户在前端输入账号，密码和校验码</li><li>校验账户，密码，校验密码是否符合要求<ol><li>账户不少于4位</li><li>密码不少于8位</li><li>账号不能重复</li><li>账户不含特殊字符</li><li>密码与校验密码相同</li></ol></li><li>对密码加密(密码<strong>千万</strong>不要直接存储到数据库)</li><li>向数据库插入用户数据</li><li>设计并通过单元测试</li></ol><h2 id="登陆设计"><a href="#登陆设计" class="headerlink" title="登陆设计"></a>登陆设计</h2><h3 id="登陆接口"><a href="#登陆接口" class="headerlink" title="登陆接口"></a>登陆接口</h3><p>接收参数:用户账户 密码<br>    请求类型: POST<br>    &gt; 请求参数过长时不建议用GET<br>    请求体: JSON格式数据<br>    返回值: 当前用户信息(脱敏)，</p><h3 id="登陆逻辑"><a href="#登陆逻辑" class="headerlink" title="登陆逻辑"></a>登陆逻辑</h3><ol><li>校验用户账户和密码是否合法<ol><li>非空</li><li>账户长度&lt;4</li><li>密码&lt;8</li><li>账户不含特殊字符</li></ol></li><li>校验密码是否输入正确，与数据库中的密文密码去对比</li><li>记录用户的登陆态(session)，将其存到服务器上，(使用后端的SpringBoot框架封装的服务器tomcat去记录)<br>cookie</li><li>返回用户信息(脱敏)</li></ol><h3 id="如何知道是哪个用户登陆了？"><a href="#如何知道是哪个用户登陆了？" class="headerlink" title="如何知道是哪个用户登陆了？"></a>如何知道是哪个用户登陆了？</h3><ol><li>连接到服务器端后，得到一个session1状态(匿名会话)，返回给前端</li><li>登陆成功后，得到登陆成功的seesion，并且给session设置一些值，返回给前端设置cookie的命令</li><li>前端接收命令，设置cookie保存到浏览器</li><li>前端再次请求后端时，在请求头中带上cookie</li><li>后端拿到前端传来的cookie，找到对应的session</li><li>后端从session中取出基于该session储存的变量（用户的登录信息，登录名等）</li></ol><h3 id="后端控制层-Controller-封装请求"><a href="#后端控制层-Controller-封装请求" class="headerlink" title="后端控制层-Controller 封装请求"></a>后端控制层-Controller 封装请求</h3><p>@RestController 适用于编写RESTful风格的API</p><blockquote><p><strong>关于RESTful风格：</strong><br>缩写：REST （不是”rest”这个单词）<br>外文名：Representational State Transfer，简称 REST。中文名：表现层状态转移，即<strong>资源在网络中以某种表现形式进行状态转移。</strong><br>提出时间：2000年。<br>属性：一种软件架构风格。（以Web为平台的。web服务的架构风格，前后端接口时候用到。）<br>**理解：**URL中只使用名词来定位资源，用HTTP协议里的动词（GET、POST、PUT、DELETE）来实现资源的增删改查操作。</p></blockquote><p>Controller层倾向于对请求参数本身的校验，不涉及业务本身逻辑(越少越好)<br>Service层是对业务逻辑的校验(有可能涉及Controller之外的类调用)</p><h3 id="用户管理接口"><a href="#用户管理接口" class="headerlink" title="用户管理接口"></a>用户管理接口</h3><ol><li>查询用户<ol><li>鉴权</li><li>根据用户名查询</li></ol></li><li>删除用户<ol><li>鉴权</li><li>逻辑删除</li></ol></li></ol><h3 id="Java-SpringBoot配置项"><a href="#Java-SpringBoot配置项" class="headerlink" title="Java SpringBoot配置项"></a>Java SpringBoot配置项</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">user-center</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/uniuser</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">~</span><br><span class="hljs-comment">#    session失效时间</span><br>  <span class="hljs-attr">session:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">86400</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/api</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">isDelete</span> <span class="hljs-comment"># 全局逻辑删除字段名</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值</span><br></code></pre></td></tr></table></figure><h3 id="前端用户登陆功能"><a href="#前端用户登陆功能" class="headerlink" title="前端用户登陆功能"></a>前端用户登陆功能</h3><ol><li>初始化，改脚手架</li><li>删除多余代码</li><li>修改模板name，实现post请求的key与后端api一致</li><li>同步router和proxy 完成代理</li></ol><h3 id="前端用户注册功能"><a href="#前端用户注册功能" class="headerlink" title="前端用户注册功能"></a>前端用户注册功能</h3><ol><li>复制粘贴，修改组件内参数名</li><li>注册router<ol><li>修改router</li><li>在<code>app.tsx</code>中修改登陆重定向逻辑，实现register路由白名单</li></ol></li><li>按要求重构组件<ol><li>常规文字修改</li><li>三个输入框<code>&lt;ProFormText&gt;</code>组件</li><li>rule传参实现规则匹配<ol><li>min&#x2F;max:限制输入大小</li><li>whitespace:false约束空格输入</li><li>validator:自定义方法实现表单全局查找，获取并按需求校验</li></ol> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts">(&#123; getFieldValue &#125;) =&gt; (&#123;<br>        <span class="hljs-title function_">validator</span>(<span class="hljs-params">_, value</span>) &#123;<br>          <span class="hljs-keyword">if</span> (!value || <span class="hljs-title function_">getFieldValue</span>(<span class="hljs-string">&#x27;userPassword&#x27;</span>) === value || value.<span class="hljs-title function_">toString</span>().<span class="hljs-property">length</span>&lt;<span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;两次输入的密码不一致!&#x27;</span>));<br>        &#125;,<br>      &#125;),<br></code></pre></td></tr></table></figure><ol start="4"><li>pattern:正则表达式模板合法匹配</li></ol></li><li>向上查找ProComponent封装的<code>&lt;LoginForm&gt;</code>组件，实现自定义登陆按钮内文字（按需求重构封装组件的思路）</li><li>利用AntD Pro的<code>history.push()</code>方法实现同域名跳转路由功能</li></ol></li></ol><h3 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h3><p>用到umi插件，requestConfig修改配置</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p><strong>正向代理：</strong> 替客户端发送请求<br><strong>反向代理：</strong> 替服务器接收请求，负载均衡<br>如何实现代理？:Nginx&#x2F;Node.js</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端深入学习笔记</title>
    <link href="/2025/04/06/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/06/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前端八股文学习笔记"><a href="#前端八股文学习笔记" class="headerlink" title="前端八股文学习笔记"></a>前端八股文学习笔记</h1><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="EventLoop-微任务与宏任务"><a href="#EventLoop-微任务与宏任务" class="headerlink" title="EventLoop 微任务与宏任务"></a>EventLoop 微任务与宏任务</h3><blockquote><p>参考资料：<br><a href="https://juejin.cn/post/7484521465200132122" target="_blank" rel="noopener noreferrer">深入浅出 JavaScript 事件循环与异步编程技巧</a><br><a href="https://juejin.cn/post/7108751200262029319" target="_blank" rel="noopener noreferrer">一文详解Event Loop事件循环、微任务、宏任务</a></p></blockquote><h4 id="1-调用栈"><a href="#1-调用栈" class="headerlink" title="1.调用栈"></a>1.调用栈</h4><p>调用栈是 JavaScript 执行<strong>同步代码</strong>的地方。它是一个<strong>后进先出</strong>的数据结构，用来记录函数的调用顺序。每当一个函数被调用时，它就会被推入调用栈；当函数执行完毕后，它就会从调用栈中弹出。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">//eloop1.js</span><br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-title function_">foo</span>();<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);<br><br>  &#125;<br><br>  <span class="hljs-title function_">bar</span>();<br><br><span class="hljs-comment">// foo</span><br><br><span class="hljs-comment">// bar</span><br><br></code></pre></td></tr></table></figure><h4 id="2-任务队列"><a href="#2-任务队列" class="headerlink" title="2.任务队列"></a>2.任务队列</h4><p>任务队列用于存放异步任务的回调函数。当异步任务（如 <code>setTimeout</code>、<code>setInterval</code>、I&#x2F;O 操作等）完成时，它们的回调函数会被放入任务队列中，等待事件循环处理。</p><p>具体的来说，异步任务又分为宏任务(Macrotask)和微任务(Microtask)</p><h5 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h5><p>宏任务是事件循环中的主要任务单元。每次事件循环会执行一个宏任务，然后检查并执行所有的微任务。</p><p>常见宏任务有：</p><table><thead><tr><th>宏任务类型</th><th>具体形态</th></tr></thead><tbody><tr><td>定时器操作</td><td><code>setTimeout</code>,<code>setInterval</code></td></tr><tr><td>I&#x2F;O 操作</td><td>文件读写、网络请求等</td></tr><tr><td>UI 渲染</td><td>浏览器中的 UI 更新。</td></tr><tr><td>事件回调</td><td><code>click</code>、<code>scroll</code> 等 DOM 事件</td></tr><tr><td><code>requestAnimationFrame</code></td><td>浏览器中的动画帧回调（优先级高于普通宏任务）</td></tr><tr><td><code>setImmediate</code></td><td>（Node.js 特有）：在当前事件循环结束后立即执行。</td></tr></tbody></table><h5 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h5><p>微任务队列用于存放优先级更高的异步任务回调，微任务会在当前任务执行完毕后立即执行且会在下一个宏任务开始之前清空。</p><table><thead><tr><th>微任务类型</th><th>具体形态</th></tr></thead><tbody><tr><td><code>Promise</code>的回调</td><td><code>then</code>,<code>catch</code>,<code>finally</code></td></tr><tr><td><code>async / await</code></td><td>异步方法</td></tr><tr><td><code>queueMicrotask</code></td><td>将任务推入微队列的API</td></tr><tr><td><code>MutationObserver</code></td><td>监听DOM变化的回调</td></tr></tbody></table><h4 id="3-事件循环的流程"><a href="#3-事件循环的流程" class="headerlink" title="3.事件循环的流程"></a>3.事件循环的流程</h4><ol><li><p><strong>执行同步代码</strong> ：从调用栈里执行同步任务</p></li><li><p><strong>异步任务压入任务队列</strong>：遇到宏&#x2F;微任务，加入对应的任务队列</p></li><li><p><strong>清空微任务队列</strong>：循环执行所有微任务（如 Promise 的回调）。</p></li><li><p><strong>执行一个宏任务</strong>：从宏任务队列中取出一个宏任务执行。</p></li></ol><p>参考示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">//eloop2.js</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Script start&#x27;</span>);<br><br><br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Timeout&#x27;</span>);<br><br>&#125;, <span class="hljs-number">0</span>);<br><br><br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Behind Promise&quot;</span>)<br><br>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise&#x27;</span>);<br><br>&#125;);<br><br><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Script end&#x27;</span>);<br><br><span class="hljs-comment">// Script start</span><br><br><span class="hljs-comment">// Behind Promise</span><br><br><span class="hljs-comment">// Script end</span><br><br><span class="hljs-comment">// Promise</span><br><br><span class="hljs-comment">// Timeout</span><br><br><br><br></code></pre></td></tr></table></figure><h4 id="4-不得不品的易错点！"><a href="#4-不得不品的易错点！" class="headerlink" title="4.不得不品的易错点！"></a>4.不得不品的易错点！</h4><ol><li><code>Promise</code>本身是一个<strong>同步</strong>的代码(只是容器)，只有它后面调用的<code>then()</code>方法里面的回调才是微任务</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span>&#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;111&#x27;</span>)<br><br>    <span class="hljs-title function_">resolve</span>()<br><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;222&quot;</span>)<br><br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;333&#x27;</span>)<br><br><br><br><span class="hljs-comment">// 111</span><br><br><span class="hljs-comment">// 333</span><br><br><span class="hljs-comment">// 222</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li><code>await</code>右边的<strong>第一个表达式</strong>还是会<strong>立即执行</strong>,表达式之后的代码才是微任务</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async1</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">async2</span>()<span class="hljs-comment">//3</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<span class="hljs-comment">//6</span><br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">async3</span>()<span class="hljs-comment">//7</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br><br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async2</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<span class="hljs-comment">//4</span><br><br>&#125;<br><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async3</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<span class="hljs-comment">//8</span><br><br>&#125;<br><br><br><br><span class="hljs-title function_">async1</span>()<span class="hljs-comment">//2</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>)<span class="hljs-comment">//5</span><br><br><span class="hljs-comment">// 1 4 6 2 5 3</span><br><br></code></pre></td></tr></table></figure><h4 id="5-例题"><a href="#5-例题" class="headerlink" title="5.例题"></a>5.例题</h4><p><img src="/bench.webp" alt="例题"><br><strong>解析：</strong></p><p>1.先执行主线程上的同步代码，打印1</p><p>2.执行第9行的函数，进⼊async1内部，async1其实是声明了⼀个promise,promise是同步代码，会顺序执⾏打印async2函数里的4 ，只有.then⾥⾯的代码会加⼊微任务队列⾥，这⾥相当于执⾏了async2()之后，再将后面的代码加⼊⼀个微任务队列中。</p><p>3.回主线程中，遇到setTimeout()，加⼊到宏任务队列</p><p>4.主线程继续往后执⾏，前⾯说过，promise是同步代码，.then后⾯的回调会加⼊微任务队列，所以会打印13⾏的7</p><p>5.主线程执⾏完成，开始执⾏微任务队列内的任务，遵循先进先出的原则，打印第四⾏的2。然后接着执行第5行第二个awaite右边的代码，打印5。第6行这个时候就被加入微任务队列。</p><p>6.接着会执行第二个微任务，也就是16行代码，打印8。第17行的then这个时候也会加入微任务队列。再依次执行第6行和第17行的两个微任务，打印3和9</p><p>7.微任务执⾏结束，开始执⾏宏任务setTimeout,打印11⾏的6.</p><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h4><p>所有同步任务都在主线程上执行，形成一个执行栈（call stack）。</p><p>遇到异步任务, 进入异步处理模块并注册回调函数; 等到指定的事件完成(如ajax请求响应返回, setTimeout延迟到指定时间)时，异步处理模块会将这个回调函数移入异步任务队列。</p><p>当栈中的代码执行完毕，执行栈中的任务为空时，主线程会先检查微任务队列中是否有任务，如果有，就将微任务队列中的所有任务依次执行，直到微任务队列为空; 之后再检查宏任务队列中是否有任务，如果有，则取出第一个宏任务加入到执行栈中，之后再清空执行栈，检查微任务，以此循环，直到全部的任务都执行完成。</p><h3 id="本地化存储"><a href="#本地化存储" class="headerlink" title="本地化存储"></a>本地化存储</h3><blockquote><p>参考资料<br><a href="https://juejin.cn/post/7273025863981383680" target="_blank" rel="noopener noreferrer">深度解析本地化存储方案与项目实战经验</a><br><a href="https://juejin.cn/post/7490391876743561256" target="_blank" rel="noopener noreferrer">前端知识库</a></p></blockquote><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><h5 id="Cookies是什么"><a href="#Cookies是什么" class="headerlink" title="Cookies是什么"></a>Cookies是什么</h5><p>Cookie 是浏览器和服务器之间传递小型数据的一种机制。它通常用于存储客户端（如浏览器）的一些信息，这些信息会在随后的请求中自动发送给服务器，帮助服务器记住用户的状态或者行为。例如，可以用 Cookie 记录用户的登录状态、购物车内容等。<br><strong>特点：</strong></p><ol><li>容量小：每个Cookie通常只能存储4KB左右的数据。</li><li>跨浏览器支持：几乎所有现代浏览器都支持Cookies。</li><li>自动发送：浏览器在每次HTTP请求中都会自动发送与网站相关的Cookies。</li></ol><h5 id="Cookies在HTTP中的使用"><a href="#Cookies在HTTP中的使用" class="headerlink" title="Cookies在HTTP中的使用"></a>Cookies在HTTP中的使用</h5><p>在 HTTP 请求和响应中，Cookie 的使用主要通过 HTTP 头部来进行。</p><ol><li><p>服务器设置 Cookie：<br>当服务器希望在浏览器中存储一些信息时，它会通过 HTTP 响应头中的 <code>Set-Cookie</code> 字段来设置 Cookie。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html<br><span class="hljs-attribute">Set-Cookie</span><span class="hljs-punctuation">: </span>userId=12345; Expires=Thu, 01 Jan 2026 00:00:00 GMT; Path=/<br></code></pre></td></tr></table></figure></li><li><p>客户端发送 Cookie：当浏览器向服务器发送请求时，浏览器会自动将存储的 Cookie 通过 Cookie 头发送给服务器。例如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/index.html</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>www.example.com<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>userId=12345<br></code></pre></td></tr></table></figure><h5 id="Cookie-的生命周期"><a href="#Cookie-的生命周期" class="headerlink" title="Cookie 的生命周期"></a>Cookie 的生命周期</h5></li></ol><ul><li><strong>会话 Cookie</strong>：没有设置 <code>Expires</code> 或 <code>Max-Age</code> 的 Cookie 是会话 Cookie，它仅在当前浏览器会话有效，浏览器关闭时会自动删除。</li><li><strong>持久 Cookie</strong>：设置了 <code>Expires</code> 或 <code>Max-Age</code>，则该 Cookie 是持久化的，直到指定的时间点才会过期。</li></ul><h5 id="Cookies的设置"><a href="#Cookies的设置" class="headerlink" title="Cookies的设置"></a>Cookies的设置</h5><p>可以通过 <code>document.cookie</code> 来设置 Cookie。基本语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&#x27;name=value; expires=expiration_date; path=path; domain=domain; secure&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><code>name=value</code>：Cookie 的键值对。</li><li><code>expires</code>：指定过期时间，必须是有效的 UTC 格式。如果不设置，则默认为会话 Cookie。</li><li><code>path</code>：指定路径，默认为当前页面路径。</li><li><code>domain</code>：指定 Cookie 的有效域名。（解决跨域问题）</li><li><code>secure</code>：表示该 Cookie 只通过 HTTPS 协议发送。</li></ul><h5 id="Cookies的安全性"><a href="#Cookies的安全性" class="headerlink" title="Cookies的安全性"></a>Cookies的安全性</h5><ul><li><p><code>HttpOnly</code>：如果设置了 <code>HttpOnly</code> 标志，该 Cookie 不能被 JavaScript 访问，避免 XSS 攻击窃取 Cookie 中的敏感信息。</p></li><li><p><code>Secure</code>：如果设置了 <code>Secure</code> 标志，Cookie 只能通过 HTTPS 连接发送，避免在 HTTP 连接中泄漏。</p></li><li><p><code>SameSite</code>：<code>SameSite</code> 属性可以防止跨站请求伪造攻击。它有三种值：</p></li></ul><ol><li><p>Strict：严格限制，只有在相同站点内的请求中才会发送 Cookie。</p></li><li><p>Lax：宽松限制，允许部分跨站请求（如通过链接跳转）。</p></li><li><p>None：没有限制，允许跨站请求发送 Cookie，但需要同时设置 Secure。</p></li></ol><h5 id="Cookie的问题"><a href="#Cookie的问题" class="headerlink" title="Cookie的问题"></a>Cookie的问题</h5><ol><li>储存空间限制，Cookie至多4kb左右</li><li>性能问题，Cookie塞在http请求头中会拖慢请求速度</li><li>跨域问题，Cookie只能在同域名下收发，可以通过设置<code>domain</code>解决</li><li>Cookie 会在客户端存储一些信息，因此容易受到各种安全攻击，可以通过设置好<code>secure</code>，<code>samesite</code>属性来解决</li></ol><h5 id="Cookies总结"><a href="#Cookies总结" class="headerlink" title="Cookies总结"></a>Cookies总结</h5><p>Cookie 是一种用于存储客户端信息的小型数据，通常用于保持用户会话、保存用户偏好设置或跟踪用户行为。它通过 HTTP 头部在客户端与服务器之间传递，可以是会话 Cookie（在浏览器会话期间有效）或 持久 Cookie（有明确的过期时间）。<br>虽然 Cookie 使用广泛，但它也存在一些缺点，如存储空间有限、性能问题、安全性隐患、隐私问题和跨域限制等。<br>因此，在使用 Cookie 时，需要考虑适当的安全措施并合理管理其生命周期。</p><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><h5 id="localStorage是什么"><a href="#localStorage是什么" class="headerlink" title="localStorage是什么"></a>localStorage是什么</h5><p>LocalStorage 是一种 Web 存储机制，允许在客户端（即浏览器）以键值对的形式存储数据。<br>与 Cookie 相比，LocalStorage 提供了更大的存储空间（通常为 5MB 或更多），并且数据存储在浏览器中。<br>即使关闭浏览器或重新启动电脑，数据也会保持直到被手动删除或过期。<br><strong>特点：</strong></p><ol><li>容量大：允许每个域名存储5MB甚至更多</li><li>永久存储：除非主动删除，否则存储的数据会在浏览器关闭后仍然存在，直到明确地被删除。</li><li>数据隔离：LocalStorage 中的数据按 域名 隔离，不同域名间的数据无法访问。</li><li>同步操作：LocalStorage 的访问是 同步的，每次操作都会立即影响存储的数据。</li><li>安全性好：与Cookie相比，localStorage不会主动发送到服务器</li></ol><h5 id="localStorage的使用"><a href="#localStorage的使用" class="headerlink" title="localStorage的使用"></a>localStorage的使用</h5><p>LocalStorage 使用 键值对 存储数据，你可以通过 localStorage 对象的 API 来设置、获取、删除数据。</p><p>我们可以使用 <code>localStorage.setItem(key, value)</code> 方法存储数据。<br>这里的 key 是数据的键，value 是存储的数据。<br>值必须是<strong>字符串</strong>，如果要存储非字符串数据，需要先将其转换为字符串（通常使用 <code>JSON.stringify()</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 存储数据</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;JohnDoe&#x27;</span>);<br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;30&#x27;</span>);<br></code></pre></td></tr></table></figure><p>通过 <code>localStorage.getItem(key)</code> 方法来读取存储的数据。它会返回该 key 对应的值，如果该键不存在，则返回 null。</p><p>使用 <code>localStorage.removeItem(key)</code> 来删除指定的键值对。</p><p>使用 <code>localStorage.clear()</code> 清除存储在 LocalStorage 中的所有数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 存储对象</span><br><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;JohnDoe&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>&#125;;<br><br><span class="hljs-comment">// 使用 JSON.stringify 转换对象为字符串</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user));<br><br><span class="hljs-comment">// 读取对象并使用 JSON.parse 转换回原对象</span><br><span class="hljs-keyword">const</span> storedUser = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;user&#x27;</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(storedUser.<span class="hljs-property">username</span>); <span class="hljs-comment">// &quot;JohnDoe&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(storedUser.<span class="hljs-property">age</span>); <span class="hljs-comment">// 30</span><br><br></code></pre></td></tr></table></figure><h5 id="LocalStorage的缺点"><a href="#LocalStorage的缺点" class="headerlink" title="LocalStorage的缺点"></a>LocalStorage的缺点</h5><ol><li>只能存储字符串：LocalStorage 只能存储字符串类型的数据，其他类型的数据需要进行序列化（<code>JSON.Stringify</code>）。</li><li>同步操作：LocalStorage 是同步的，可能会对性能产生影响，尤其是当存储的数据量较大时。</li><li>同源策略限制：LocalStorage 中的数据是 按域名隔离 的，无法在不同域之间共享数据。</li><li>没有过期时间：LocalStorage 中的数据不会自动过期，因此需要手动管理存储数据的生命周期。如果不手动清理过期数据，可能会造成存储空间浪费。</li><li>不适用于敏感信息：LocalStorage 数据容易被浏览器中的脚本访问，因此不适合存储敏感的用户数据（如密码、令牌等）。它不具备像 Cookie 的 HttpOnly、Secure 和 SameSite 等安全特性。</li></ol><h5 id="localStorage总结"><a href="#localStorage总结" class="headerlink" title="localStorage总结"></a>localStorage总结</h5><p>LocalStorage 是一种客户端存储机制，允许在浏览器中存储数据，具有较大的存储空间（通常为 5MB 或更多），并且数据会在浏览器关闭后保持，直到被手动删除。<br>它非常适合用于持久化存储用户数据、缓存数据和管理 SPA(<em>单网页应用</em>) 的状态。但需要注意的是，LocalStorage 存储的数据容易受到 XSS 攻击，因此不适合存储敏感数据.<br>同时，它的数据存储是同步的，可能会影响性能。在使用时，要谨慎选择合适的数据存储方式，确保数据的安全性和有效管理。</p><h4 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h4><h5 id="SessionStorages是什么"><a href="#SessionStorages是什么" class="headerlink" title="SessionStorages是什么"></a>SessionStorages是什么</h5><p>SessionStorage 提供了一种简单的方式来在浏览器会话中存储数据，且该数据是 <strong>仅限于当前会话</strong> 的。<br>每个浏览器标签页或窗口都有独立的 SessionStorage，彼此之间的数据不能共享。SessionStorage 与 LocalStorage 类似，但它的生命周期更加短暂。<br><strong>特点：</strong></p><ol><li>会话级存储：数据只在当前浏览器会话期间有效。会话结束时，数据会自动清除。</li><li>每个标签页独立：每个浏览器标签页或窗口都有独立的 SessionStorage，标签页之间不能共享 SessionStorage 数据。</li><li>存储容量：SessionStorage 的存储空间通常与 LocalStorage 相同，通常为 5MB 或更多，具体取决于浏览器。</li><li>同步 API：SessionStorage 的 API 是同步的，意味着每次读取、存储或删除数据时，操作会立即完成。</li></ol><h5 id="sessionStorage的使用"><a href="#sessionStorage的使用" class="headerlink" title="sessionStorage的使用"></a>sessionStorage的使用</h5><p>语法同<code>localStorage</code></p><h5 id="localStorage-VS-sessionStorage-你们知道吗"><a href="#localStorage-VS-sessionStorage-你们知道吗" class="headerlink" title="localStorage VS sessionStorage 你们知道吗"></a>localStorage VS sessionStorage 你们知道吗</h5><table><thead><tr><th>特性</th><th>SessionStorage</th><th>LocalStorage</th></tr></thead><tbody><tr><td>存储容量</td><td>5MB 或更多，取决于浏览器</td><td>5MB 或更多，取决于浏览器</td></tr><tr><td>生命周期</td><td>仅在当前会话（标签页）有效，会话结束时删除</td><td>永久存储，直到显式删除</td></tr><tr><td>数据隔离性</td><td>不同标签页、不同窗口的数据隔离</td><td>同一域下的数据共享</td></tr><tr><td>存储方式</td><td>键值对，字符串</td><td>键值对，字符串</td></tr><tr><td>传输到服务器</td><td>不会随每个请求自动发送</td><td>会随每个 HTTP 请求自动发送到服务器</td></tr><tr><td>API 异步性</td><td>同步 API</td><td>同步 API</td></tr><tr><td>适用场景</td><td>临时存储会话信息，如用户登录状态、购物车等</td><td>长期存储用户设置、偏好、浏览历史等</td></tr></tbody></table><h5 id="sessionStorage总结"><a href="#sessionStorage总结" class="headerlink" title="sessionStorage总结"></a>sessionStorage总结</h5><p>sessionStorage 一般用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</p><h3 id="JavaScript数组Array"><a href="#JavaScript数组Array" class="headerlink" title="JavaScript数组Array"></a>JavaScript数组Array</h3><blockquote><p>参考资料:</p><p><a href="https://juejin.cn/post/6844904048106143757" target="_blank" rel="noopener noreferrer">全面介绍JavaScript数组方法</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreferrer">JavaScript标准对象 &gt; Array</a></p><p>菜鸟教程</p></blockquote><h4 id="Array的描述"><a href="#Array的描述" class="headerlink" title="Array的描述"></a>Array的描述</h4><p>在 JavaScript 中，数组不是<em>原始类型</em>，而是具有以下核心特征的<code>Array</code>对象(引用类型)：</p><ul><li><strong>JavaScript 数组是可调整大小的，并且可以包含不同的数据类型。</strong>（当不需要这些特征时，可以使用类型化数组。）</li><li><strong>JavaScript 数组不是关联数组</strong>，因此，不能使用任意字符串作为索引访问数组元素，但必须使用非负整数（或它们各自的字符串形式）作为索引访问。</li><li><strong>JavaScript 数组的索引从 0 开始</strong>：数组的第一个元素在索引 0 处，第二个在索引 1 处，以此类推，最后一个元素是数组的 length 属性减去 1 的值。</li><li><strong>JavaScript 数组复制操作创建浅拷贝。</strong>（所有 JavaScript 对象的标准内置复制操作都会创建浅拷贝，而不是深拷贝）。<blockquote><p><strong>关于深浅拷贝</strong><br>浅拷贝（Shallow Copy）</p><p>浅拷贝创建一个新对象，但只<strong>复制原始对象的引用类型字段的地址</strong>，而不复制引用指向的对象本身。这意味着新对象和原始对象的引用类型字段将指向相同的对象。如果原始对象中的字段是基本数据类型，则这些字段的值会被复制到新对象中。由于引用类型字段共享，<strong>对新对象的修改可能会影响原始对象。</strong></p><p>深拷贝（Deep Copy）</p><p>深拷贝则<strong>创建一个全新的对象</strong>，并递归地复制原始对象的所有字段，包括引用指向的对象。这种方法会复制整个对象结构，确保新对象和原始对象之间的所有关系都是独立的。因此，<strong>对新对象的修改不会影响到原始对象。</strong></p></blockquote></li></ul><h4 id="Array的数组索引"><a href="#Array的数组索引" class="headerlink" title="Array的数组索引"></a>Array的数组索引</h4><p>Array 对象不能使用任意字符串作为元素索引（如关联数组），必须使用非负整数（或它们的字符串形式）。<br>JavaScript 语法要求使用方括号表示法来访问以数字开头的属性，形如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>])<br><span class="hljs-comment">//或者</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-string">&#x27;0&#x27;</span>])<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> JavaScript 引擎通过隐式的<code>toString</code>，将 years[2] 中的 2 强制转换为字符串。因此，’2’ 和 ‘02’ 将指向 years 对象上的两个不同的槽位。<br>只有<code>years[&#39;2&#39;]</code>是一个实际的数组索引。而<code>years[&#39;02&#39;]</code>是一个在数组迭代中不会被访问的任意字符串属性。</p><h4 id="Array的数组方法"><a href="#Array的数组方法" class="headerlink" title="Array的数组方法"></a>Array的数组方法</h4><h5 id="1-检测方法"><a href="#1-检测方法" class="headerlink" title="1. 检测方法"></a>1. 检测方法</h5><ol><li><code>Array.isArray()</code><br>判断传入的值是否是一个数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// true</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">// false</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(&#123;<span class="hljs-attr">foo</span>: <span class="hljs-number">123</span>&#125;)<br><span class="hljs-comment">// false</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-string">&#x27;foobar&#x27;</span>)   <br><span class="hljs-comment">// false</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-literal">undefined</span>)  <br></code></pre></td></tr></table></figure><ol start="2"><li><code>typeof</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>]); <span class="hljs-comment">// &quot;object&quot;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><code>Object.prototype.toString.call()</code> 适用于所有类型的详细判断</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>])); <span class="hljs-comment">// &quot;[object Array]&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><code>constructor</code>属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> i = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i.<span class="hljs-property">constructor</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">// &quot;Array&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-创建数组方法"><a href="#2-创建数组方法" class="headerlink" title="2. 创建数组方法"></a>2. 创建数组方法</h5><ol><li><code>Array.from()</code><br><code>Array.from()</code>方法用于将类数组对象和可迭代对象转为真正的数组，并且返回一个新的，浅拷贝的数组实例。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 报错</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-comment">// 报错</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-comment">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;foo&#x27;</span>))<br><span class="hljs-comment">// []</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br><span class="hljs-comment">// []</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-number">123</span>))<br><span class="hljs-comment">// []</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-title class_">NaN</span>))<br></code></pre></td></tr></table></figure><ol start="2"><li><code>Array.of()</code><br>Array.of()创建一个包含所有传入参数的数组，不考虑参数的数量或类型，返回一个新数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>()                  <span class="hljs-comment">// []</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-literal">undefined</span>)         <span class="hljs-comment">// [undefined]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-literal">null</span>)              <span class="hljs-comment">// [null]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-title class_">NaN</span>)               <span class="hljs-comment">// [NaN]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>)                 <span class="hljs-comment">// [1]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)              <span class="hljs-comment">// [1, 2]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])           <span class="hljs-comment">// [[1,2,3]]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>&#125;)   <span class="hljs-comment">// [&#123;id:1&#125;, &#123;id:2&#125;]</span><br></code></pre></td></tr></table></figure><h5 id="3-遍历（迭代）方法"><a href="#3-遍历（迭代）方法" class="headerlink" title="3. 遍历（迭代）方法"></a>3. 遍历（迭代）方法</h5><ol><li><code>forEach()</code><br>对数组中的每一项运行指定的函数。这个方法返回<code>undefined</code>，即使你return了一个值。<ol><li><p>Array.forEach()参数语法：</p><table><thead><tr><th>element</th><th>index</th><th>array</th></tr></thead><tbody><tr><td>当前元素</td><td>当前元素的索引</td><td>数组本身</td></tr></tbody></table></li><li><p>第二个参数（可选）：当执行回调函数时用作 this 的值。</p></li></ol></li></ol><p><strong>注意:</strong> <code>Array.forEach()</code>不能中断循环(使用<code>break</code>，或<code>continue</code>语句)。只能用<code>return</code>退出本次回调，进行下一次回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>&#125;]<br><span class="hljs-comment">// 1 - zhangsan</span><br><span class="hljs-comment">// 2 - lisi</span><br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;el.id&#125;</span> - <span class="hljs-subst">$&#123;el.name&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-keyword">return</span> n + <span class="hljs-number">2</span><br>  &#125;<br>&#125;;<br><span class="hljs-comment">// true </span><br>[&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>&#125;].<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">el,index,arr</span>)&#123;<br>  <span class="hljs-keyword">if</span>(el.<span class="hljs-property">id</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === obj)<br>&#125;,obj);<br><br></code></pre></td></tr></table></figure><ol start="2"><li><p><code>map()</code><br>返回一个新数组，结果是该数组中的每个元素都调用提供的函数后返回的结果。</p><ol><li><p>Array.map()参数语法：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>element</td><td>当前元素</td></tr><tr><td>index</td><td>当前元素的索引 (可选)</td></tr><tr><td>array</td><td>数组本身 (可选)</td></tr></tbody></table></li><li><p>第二个参数（可选）：当执行回调函数时用作 this 的值。</p></li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>&#125;]<br><span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">el,index,arr</span>) =&gt;</span> &#123;<br>  el.<span class="hljs-property">age</span> = <span class="hljs-number">20</span><br>  <span class="hljs-keyword">return</span> el<br>&#125;);<br><span class="hljs-comment">// [&#123;id: 1,age: 20&#125;,&#123;id: 2,age: 20&#125;,&#123;id: 3,age: 20&#125;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><ol start="3"><li><p><code>filter()</code><br>对数组中的每一项运行指定的函数，返回该函数会返回true的项组成的新的数组。如果没有任何数组元素通过测试，则返回空数组。</p><ol><li><p>Array.filter()参数语法：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>element</td><td>当前元素</td></tr><tr><td>index</td><td>当前元素的索引 (可选)</td></tr><tr><td>array</td><td>数组本身 (可选)</td></tr></tbody></table></li><li><p>第二个参数（可选）：当执行回调函数时用作 this 的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>&#125;]<br><span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">el,index,arr</span>) =&gt;</span> &#123;<br>el.<span class="hljs-property">age</span> = <span class="hljs-number">20</span><br><span class="hljs-keyword">return</span> el<br>&#125;);<br><span class="hljs-comment">// [&#123;id: 1,age: 20&#125;,&#123;id: 2,age: 20&#125;,&#123;id: 3,age: 20&#125;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br><br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>some()</code><br>检测数组中的是否有满足判断条件的元素。</p></li></ol><p>对数组中的每一项运行指定的函数，如果该函数对<strong>任一项返回true</strong>，则返回true，并且剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。</p><ol><li><p>Array.some()参数语法：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>element</td><td>当前元素</td></tr><tr><td>index</td><td>当前元素的索引 (可选)</td></tr><tr><td>array</td><td>数组本身 (可选)</td></tr></tbody></table></li><li><p>第二个参数（可选）：当执行回调函数时用作 this 的值。</p></li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>&#125;]<br><span class="hljs-keyword">const</span> someResult = arr.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">el,index,arr</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> el.<span class="hljs-property">id</span> === <span class="hljs-number">1</span><br>&#125;);<br><span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(someResult)<br><br></code></pre></td></tr></table></figure><ol start="5"><li><code>every()</code><br>检测数组所有元素是否都符合判断条件。</li></ol><p>对数组中的每一项运行指定的函数，如果该函数对每一项都返回true，则返回true。若收到一个空数组，此方法在一切情况下都会返回true。如果数组中检测到有一个元素不满足，则返回 false，且剩余的元素不会再进行检测。</p><h3 id="JavaScript中比较常考的点"><a href="#JavaScript中比较常考的点" class="headerlink" title="JavaScript中比较常考的点"></a>JavaScript中比较常考的点</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ol><li><p>在Number与String运算时，<strong>只有</strong><code>+</code>操作时Number会隐式转换为String，其余情况下都是String隐式转换为Number</p></li><li><p>在JavaScript中，数据类型分两大类：</p><p><strong>原始类型(Primitive Types)：</strong></p><table><thead><tr><th>类型名</th><th>类型英文</th><th>备注</th></tr></thead><tbody><tr><td>字符串</td><td>String</td><td></td></tr><tr><td>数字</td><td>Number</td><td></td></tr><tr><td>布尔值</td><td>Boolean</td><td></td></tr><tr><td>未定义</td><td>Undefined</td><td></td></tr><tr><td>空值</td><td>Null</td><td><em>使用 <code>typeof</code> 操作符的结果是”<code>Object</code>“</em></td></tr><tr><td>符号</td><td>Symbol</td><td>ES6新特性</td></tr><tr><td>大整数</td><td>BigInt</td><td>ES6新特性</td></tr></tbody></table><p><strong>引用类型(Reference Types)：</strong></p><table><thead><tr><th>类型名</th><th>类型英文</th><th>备注</th></tr></thead><tbody><tr><td>对象</td><td>Object</td><td></td></tr><tr><td>数组</td><td>Array</td><td></td></tr><tr><td>函数</td><td>Function</td><td></td></tr><tr><td>日期</td><td>Date</td><td></td></tr><tr><td>正则表达式</td><td>RegExp</td><td></td></tr><tr><td>错误</td><td>Error</td><td></td></tr></tbody></table></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React学习笔记</title>
    <link href="/2025/02/06/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/06/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-React介绍"><a href="#1-React介绍" class="headerlink" title="1.React介绍"></a>1.React介绍</h1><p><strong>React</strong> 是一个用于构建用户界面的JavaScript库，它允许开发者以声明式的方式创建交互丰富的Web应用。React不是一个完整的框架，而是专注于构建组件化的UI层。它可以与其他库或框架（如Redux或Angular）配合使用，以构建复杂的应用程序。</p><h1 id="2-React创建环境（以Vite为例）"><a href="#2-React创建环境（以Vite为例）" class="headerlink" title="2.React创建环境（以Vite为例）"></a>2.React创建环境（以Vite为例）</h1><p>在Node环境下输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npmignore">npm create vite@latest my-vite-app <br></code></pre></td></tr></table></figure><p>按要求选择React+JavaScript配置</p><p><strong>文件目录</strong></p><table><thead><tr><th>文件名</th><th>用途</th></tr></thead><tbody><tr><td>package.json</td><td>核心包，包含核心依赖和关键命令</td></tr><tr><td>.src</td><td>存放项目的源代码。</td></tr><tr><td>.src&#x2F;index.js</td><td>项目入口文件</td></tr><tr><td>.src&#x2F;App.js</td><td>项目根组件</td></tr></tbody></table><p>.&#x2F;src&#x2F;main.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// ./src/main.jsx项目入口 从这里开始运行</span><br><br><span class="hljs-comment">//React项目核心导入</span><br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span><br><span class="hljs-comment">//导入项目根组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.jsx&#x27;</span><br><span class="hljs-comment">//把App根组件渲染到id为&#x27;root&#x27;的节点</span><br><span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)).<span class="hljs-title function_">render</span>(  <br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br>)<br><br><br></code></pre></td></tr></table></figure><p>.&#x2F;src&#x2F;App.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//项目的根组件</span><br><span class="hljs-comment">// App -&gt; index.js -&gt; index.html(root)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        This is an App. </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br><br><br></code></pre></td></tr></table></figure><h1 id="3-JSX基础"><a href="#3-JSX基础" class="headerlink" title="3.JSX基础"></a>3.JSX基础</h1><h2 id="JSX理论"><a href="#JSX理论" class="headerlink" title="JSX理论"></a>JSX理论</h2><p><strong>概念：</strong> <strong>JSX</strong>是<em>JavaScript</em>和<em>XML</em>的缩写，表示<strong>JS代码中编写HTML模板结构</strong>，是React中编写UI模板的方法。</p><p><strong>本质：</strong> <strong>JSX</strong>本质是对JS的语法扩展，需要借助<em>Babel</em>编译转化成正常的JS。</p><h2 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h2><h3 id="JSX使用JS表达式"><a href="#JSX使用JS表达式" class="headerlink" title="JSX使用JS表达式"></a>JSX使用JS表达式</h3><p>使用<code>&#123;&#125;</code>传递表达式</p><p><strong>1.传递字符串</strong></p><p><strong>2.传递JavaScript变量&#x2F;对象&#x2F;函数&#x2F;方法</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        This is an App. </span><br><span class="language-xml">        &#123;&#x27;This is a message&#x27;&#125;</span><br><span class="language-xml">        &#123;/* 传字符串 */&#125;</span><br><span class="language-xml">        &#123;count&#125;</span><br><span class="language-xml">        &#123;/* 传JavaScript变量 */&#125;</span><br><span class="language-xml">        &#123;getName()&#125;</span><br><span class="language-xml">        &#123;/* 传函数调用 */&#125;</span><br><span class="language-xml">        &#123;new Date().getDate()&#125;</span><br><span class="language-xml">        &#123;/* 传方法调用 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span>&quot;<span class="hljs-attr">red</span>&quot;&#125;&#125;&gt;</span></span><br><span class="language-xml">          &#123;/* 传js对象 */&#125;</span><br><span class="language-xml">          This is a red div.</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：if、Switch、变量声明属于语句而非表达式，因此不能出现在<code>&#123;&#125;</code>中。</strong></p><h3 id="JSX实现列表渲染"><a href="#JSX实现列表渲染" class="headerlink" title="JSX实现列表渲染"></a>JSX实现列表渲染</h3><p><strong>语法：</strong> 在JSX中可以使用原生JS中的<em>map方法</em>渲染遍历列表</p><p><strong><code>&#123;targetList.map(item=&gt; &lt;dom key=&#123;item.key&#125;&gt; &lt;/dom&gt;)&#125;</code></strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> list =[&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">101</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">102</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;React&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">103</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Angular&#x27;</span>&#125;,<br><br>]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            &#123;list.map(item =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：对应的DOM标签上必须绑定一个独一无二的key值，可以是字符串或number，常用id绑定</strong></p><h3 id="JSX中实现条件渲染"><a href="#JSX中实现条件渲染" class="headerlink" title="JSX中实现条件渲染"></a>JSX中实现条件渲染</h3><p><strong>语法：</strong> 逻辑运算符 <strong><code>&amp;&amp;</code></strong> 或三元表达式 <strong><code>?:</code></strong> 实现条件渲染。</p><p><strong><code>&#123;flag &amp;&amp; &lt;DOM&gt;&lt;/DOM&gt;&#125;</code></strong></p><p><strong><code>&#123;flag ? &lt;DOM&gt;A&lt;/DOM&gt; : &lt;DOM&gt;B&lt;/DOM&gt;&#125;</code></strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> isLogin = <span class="hljs-literal">false</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          &#123;isLogin &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>This is a span.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#125;</span><br><span class="language-xml">          &#123;isLogin ? <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Welcome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br><br><br></code></pre></td></tr></table></figure><p><strong>对于复杂情况，可构造核心函数，根据不同类型返回不同的JSX模板</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> articleType = <span class="hljs-number">3</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArticleTem</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">if</span> (articleType === <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>No image<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(articleType === <span class="hljs-number">1</span>)&#123;<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Single image<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Triple Image<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br><br><br>&#123;<span class="hljs-title function_">getArticleTem</span>()&#125;<br></code></pre></td></tr></table></figure><h1 id="4-React事件与组件"><a href="#4-React事件与组件" class="headerlink" title="4.React事件与组件"></a>4.React事件与组件</h1><h2 id="React事件"><a href="#React事件" class="headerlink" title="React事件"></a>React事件</h2><h3 id="React基础事件绑定"><a href="#React基础事件绑定" class="headerlink" title="React基础事件绑定"></a>React基础事件绑定</h3><p><strong>语法:</strong> <em><strong><code>&lt;DOM onEvent=&#123;function()&#125;&gt;&lt;/DOM&gt;</code></strong></em></p><p>例如</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;button被点击了&quot;</span>)<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>)&#123;<br><br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用事件对象参数"><a href="#使用事件对象参数" class="headerlink" title="使用事件对象参数"></a>使用事件对象参数</h3><p><strong>语法:</strong> 在事件回调函数中设置形参 <strong><code>e</code></strong></p><p>注意在DOM中的格式  <code>&lt;DOM action=&#123;(e) =&gt; function(Args,e)&#125;&gt; &lt;/DOM&gt; </code></p><p>其中,事件对象<code>e</code> 是可选项。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params">name,e</span>) =&gt;&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;button被点击了&quot;</span>)<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>)&#123;<br><br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> handleClick(&#x27;jack&#x27;),e&#125;&gt;Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h2><h3 id="React组件使用"><a href="#React组件使用" class="headerlink" title="React组件使用"></a>React组件使用</h3><p><strong>概念:</strong> 一个组件就是用户界面的一部分,可以有自己的逻辑和外观,组件之间可以互相嵌套和多次复用。</p><p>在React中，一个组件就是一个首字母大写的函数，内部存放了组件的逻辑和视图UI，渲染组件时，以标签的形式书写即可。</p><p><strong>创建组件的方法：</strong></p><p>1.定义组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Button</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.使用组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useState基础"><a href="#useState基础" class="headerlink" title="useState基础"></a>useState基础</h3><p>useState是一个React Hook,允许我们向组件中添加一个<strong>状态变量</strong>,从而控制影响组件的渲染结果</p><p>本质:和普通JS变量不同,状态变量一旦发生变化,组件的视图UI也会发生变化。<strong>（数据驱动视图）</strong></p><p>语法:<strong><code>const [Variable,setVariableFunction] = useState(initialValue)</code></strong></p><ol><li><p><strong>useState</strong>是一个函数，返回值是一个数组</p></li><li><p>数组中的第一个参数是状态变量，第二个参数是set函数，用来修改状态变量</p></li><li><p>useState的参数将作为count的初始量</p></li></ol><p><strong>注意:</strong> 1. 需要引用<code>import &#123; useState &#125; from &quot;react&quot;</code> </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count,setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>)<br>  &#125; <br>    &lt;button onClick=&#123;handleClick&#125;&gt;&#123;count&#125;&lt;/button&gt;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>状态不可变</strong><br>在React中,状态被认为是只读的,因此始终要使用匹配的<code>setVariableFunction()</code> 来替换原状态变量，直接的修改状态并不能引发视图更新。</p></li><li><p><strong>修改对象状态</strong><br>对于对象类型的状态变量，应该始终要使用匹配的<code>setVariableFunction()</code> 来替换原状态对象。</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> [form,setForm] = <span class="hljs-title function_">useState</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>&#125;)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeForm</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    <span class="hljs-title function_">setForm</span>(&#123;<br>      ...form,<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;john&#x27;</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;changeForm&#125;</span>&gt;</span>&#123;form.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br>)<br>&#125;<br></code></pre></td></tr></table></figure><p><em>注:</em></p><p><strong>扩展运算符（Spread Operator）:”…”</strong></p><ul><li><p>用于数组或对象的展开。例如，在数组中：<br>JavaScript复制<br>   let arr1 &#x3D; [1, 2, 3];<br>   let arr2 &#x3D; [0, …arr1, 4];<br>这里“…arr1”将arr1数组中的元素1、2、3展开，最终arr2的值为[0, 1, 2, 3, 4]。它能够将一个数组的元素逐个添加到另一个数组中。</p></li><li><p>对于对象，可以用于复制对象的属性。例如：<br>JavaScript复制<br>   let obj1 &#x3D; {a: 1, b: 2};<br>   let obj2 &#x3D; {…obj1, c: 3};<br>“…obj1”将obj1对象的属性a和b复制到obj2中，obj2的结构为{a: 1, b: 2, c: 3}。它能够将一个对象的可枚举属性复制到另一个对象中。</p></li></ul><h3 id="组件样式控制"><a href="#组件样式控制" class="headerlink" title="组件样式控制"></a>组件样式控制</h3><ol><li><p>行内样式<br><code>&lt;DOM style=&#123;color:&#39;red&#39;&#125;&gt;&lt;/DOM&gt;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//index.css</span><br>.<span class="hljs-property">foo</span>&#123;<br>    <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>;<br>    <span class="hljs-attr">fontSize</span>:<span class="hljs-string">&quot;50px&quot;</span><br>&#125;<br><span class="hljs-comment">//App.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">classname</span>=<span class="hljs-string">&#x27;foo&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>class类名控制<br><strong>语法:</strong> <code>&lt;DOM className=&quot;&quot;&gt;&lt;/DOM&gt;</code></li></ol></li></ol><p><em>注:</em> </p><ol><li><p>写行内样式时,CSS属性名要使用驼峰命名法.</p></li><li><p>需在App.js下引用对应的CSS文件.</p></li></ol><p><strong>classname优化类名控制</strong></p><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npmignore">npm install classnames<br></code></pre></td></tr></table></figure></li><li><p>引用</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> classNames = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;classnames&#x27;</span>)<br><span class="hljs-comment">//ES6</span><br><span class="hljs-keyword">import</span> classNames <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;classnames&#x27;</span><br><span class="hljs-comment">//import</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用<br>语法:<code>classNames(&#39;objclassName1&#39;,&#39;2...&#39;,&#123;conditionalClassName:Condition&#125;)</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;span <br>&#123;key=item.<span class="hljs-property">type</span>&#125;<br>className=&#123;<span class="hljs-title function_">classNames</span>(<span class="hljs-string">&#x27;nav-item&#x27;</span>,&#123;<span class="hljs-attr">active</span>:type === item.<span class="hljs-property">type</span>&#125;)&#125;<br></code></pre></td></tr></table></figure><h3 id="受控表单绑定"><a href="#受控表单绑定" class="headerlink" title="受控表单绑定"></a>受控表单绑定</h3><p><strong>概念:</strong> 使用React组件的状态(useState)控制表单的状态,即双向绑定</p><p><a href="https://imgse.com/i/pEkBICq"><img src="https://s21.ax1x.com/2025/01/19/pEkBICq.png" alt="pEkBICq.png"></a></p><p><strong>步骤:</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [value,setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">// 1.准备一个React状态值</span><br>&lt;input <br>type=<span class="hljs-string">&quot;text&quot;</span><br>value=&#123;value&#125;<br><span class="hljs-comment">// 2.通过value属性绑定React状态变量</span><br>onChange=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-title function_">setValue</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)&#125;<br><span class="hljs-comment">// 3.绑定onChange事件 通过参数e拿到输入框的值 反向修改到React状态中</span><br>/&gt;<br></code></pre></td></tr></table></figure><h3 id="React中获取DOM"><a href="#React中获取DOM" class="headerlink" title="React中获取DOM"></a>React中获取DOM</h3><p><strong>概念:</strong> 在React组件中<strong>获取&#x2F;操作</strong> DOM,需要使用<strong>useRef</strong> 钩子函数,分为两步:</p><ol><li><p>使用useRef创建Ref对象,并与JSX绑定</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> ref=&#123;inputRef&#125; /&gt;<br></code></pre></td></tr></table></figure></li><li><p>在DOM可用时(组件渲染完毕),通过<code>inputRef.current</code>获取DOM对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inputRef.<span class="hljs-property">current</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="React组件通信"><a href="#React组件通信" class="headerlink" title="React组件通信"></a>React组件通信</h2><h3 id="理解组件通信"><a href="#理解组件通信" class="headerlink" title="理解组件通信"></a>理解组件通信</h3><p><strong>概念:</strong> 组件通信就是<em>组件之间的数据传递</em>,根据组件嵌套关系的不同,有着不同的通信方法.</p><h4 id="父传子-基础实现"><a href="#父传子-基础实现" class="headerlink" title="父传子-基础实现"></a>父传子-基础实现</h4><p><strong>实现步骤:</strong> </p><ol><li><p>父组件传递数据,在子组件标签上绑定属性</p></li><li><p>子组件接收数据,子组件通过<strong>props参数</strong> 接收数据</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;This is app name.&#x27;</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">props</span>)&#123;<br>    <span class="hljs-comment">// props:对象里面包含了父组件传递过来的所有数据</span><br>    <span class="hljs-comment">// eslint-disable-next-line react/prop-types</span><br><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>this is son &#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#123;<span class="hljs-comment">/* 父传子通信 */</span>&#125;<br>        &lt;div&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;name&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br>        &lt;/div&gt;<br><br><br></code></pre></td></tr></table></figure><h4 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子-props"></a>父传子-props</h4><ol><li><p>props可传递任意的数据<br>数字、字符串、布尔值、数组、对象、函数、JSX</p></li><li><p>props是<strong>只读对象</strong><br>子组件<strong>只能读取props中的数据</strong>,不能直接进行修改,父组件的数据只能由父组件修改</p></li></ol><h4 id="父传子-props-children"><a href="#父传子-props-children" class="headerlink" title="父传子-props children"></a>父传子-props children</h4><p>场景:当我们把内容嵌套在子组件中时,父组件会自动在名为prop.children属性中接收内容</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">props</span>)&#123;<br>    <span class="hljs-comment">// props:对象里面包含了父组件传递过来的所有数据</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props)<br>    <span class="hljs-comment">// eslint-disable-next-line react/prop-types</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>this is son &#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  &#125;<br><br><br><br></code></pre></td></tr></table></figure><h4 id="父子组件通信-子传父"><a href="#父子组件通信-子传父" class="headerlink" title="父子组件通信-子传父"></a>父子组件通信-子传父</h4><p>核心思路:在子组件中调用父组件中的函数并传递数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">&#123;onGetMsg&#125;</span>)&#123;<br>  <span class="hljs-keyword">const</span> sonMsg = <span class="hljs-string">&quot;This is son msg.&quot;</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 在子组件中调用父组件的形参 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>onGetMsg(sonMsg)&#125;&gt;send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getMsg</span> = (<span class="hljs-params">msg</span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">onGetMsg</span>=<span class="hljs-string">&#123;getMsg&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用状态提升实现兄弟组件通信"><a href="#使用状态提升实现兄弟组件通信" class="headerlink" title="使用状态提升实现兄弟组件通信"></a>使用状态提升实现兄弟组件通信</h4><p><strong>实现思路:</strong> 借助<em>状态提升</em> 机制,通过父组件进行兄弟组件之间的数据传递</p><ol><li><p>A组件先通过子传父的方式把数据传给父组件App</p></li><li><p>App拿到数据后通过父传子的方式传递给B组件</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params">&#123; onGetAname &#125;</span>)&#123;<br>  <span class="hljs-comment">// &#123;onGetAname&#125;是组件A的参数解构,意味着函数接受同名函数作为props在组件内调用</span><br>  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;This is A name&#x27;</span><br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      This is A component</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onGetAname(name)&#125;&gt;Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  )<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params">&#123;name&#125;</span>)&#123;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      This is B component.</span><br><span class="language-xml">      &#123;name&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  )<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name,setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getAname</span> = (<span class="hljs-params">name</span>) =&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br>    <span class="hljs-title function_">setName</span>(name)<br>  &#125;<br> <span class="hljs-keyword">return</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    This is app.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">A</span> <span class="hljs-attr">onGetAname</span>=<span class="hljs-string">&#123;getAname&#125;/</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">B</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;name&#125;/</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br> )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用Context机制跨层级组件通信"><a href="#使用Context机制跨层级组件通信" class="headerlink" title="使用Context机制跨层级组件通信"></a>使用Context机制跨层级组件通信</h4><p><strong>实现步骤:</strong> </p><ol><li><p>使用<strong>createContext</strong>方法创建上下文对象Ctx</p></li><li><p>在顶层组件(App)中通过<strong>Ctx.Provider</strong>组件提供数据</p></li><li><p>在底层组件中通过<strong>useContext</strong>钩子函数获取数据</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1.创建上下文对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MsgContext</span> = <span class="hljs-title function_">createContext</span>()<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>)&#123;<br><br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      This is A component</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">B</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  )<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 3.使用useContext钩子函数获取数据</span><br>  <span class="hljs-keyword">const</span> msg = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MsgContext</span>)<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      This is B component.</span><br><span class="language-xml">      &#123;msg&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  )<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">const</span> msg = <span class="hljs-string">&quot;This is app msg.&quot;</span><br> <span class="hljs-keyword">return</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &#123;/* 2. 在顶层创建Ctx.Provider组件 */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">MsgContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;msg&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">A</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">MsgContext.Provider</span>&gt;</span></span><br><span class="language-xml">    This is app.</span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br> )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><h4 id="useEffect的使用"><a href="#useEffect的使用" class="headerlink" title="useEffect的使用"></a>useEffect的使用</h4><p>useEffect是一个React Hook函数,用于在React组件中创建<em>不是由于事件引起</em>而是<strong>渲染本身引起的操作</strong> ,例如<em>发送AJAX请求,更改DOM</em></p><p><strong>需求:</strong> 在组件渲染完毕后,立刻从服务器获取频道数据并显示到页面上</p><p><strong>语法:</strong></p><p><code>useEffect(() = &#123;Function()&#125;,[Array])</code></p><p>参数1为<strong>副作用函数</strong> ,在函数内放置要执行的操作</p><p>参数2为数组(<em>可选</em>),数组内的依赖项会影响第一个参数函数的执行,若为空,<strong>副作用函数只会在组件渲染完毕后执行一次</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">URL</span> = <span class="hljs-string">&quot;http://geek.itheima.net/v1_0/channels&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list,setList] = <span class="hljs-title function_">useState</span>([])<br> <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-comment">//  获取频道列表</span><br> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-variable constant_">URL</span>)<br>  <span class="hljs-keyword">const</span> jsonRes = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonRes)<br>  <span class="hljs-title function_">setList</span>(jsonRes.<span class="hljs-property">data</span>.<span class="hljs-property">channels</span>)<br> &#125;<br> <span class="hljs-title function_">getList</span>()<br> &#125;,[])<br> <span class="hljs-keyword">return</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;list.map(item =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> )<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="useEffect依赖项参数"><a href="#useEffect依赖项参数" class="headerlink" title="useEffect依赖项参数"></a>useEffect依赖项参数</h4><table><thead><tr><th>依赖项</th><th>副作用函数执行时机</th></tr></thead><tbody><tr><td>没有依赖项</td><td>组件初始渲染+组件更新时执行</td></tr><tr><td>空数组依赖</td><td>只在初始渲染时执行一次</td></tr><tr><td>添加特定依赖项</td><td>组件初始渲染+特性依赖项变化时执行</td></tr></tbody></table><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 无依赖项 初始+组件更新</span><br>  <span class="hljs-keyword">const</span> [count,setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;副作用函数执行了&#x27;</span>)<br>  &#125;)<br><br>  <span class="hljs-comment">// 空数组依赖 仅在初始时执行一次</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;空数组依赖&#x27;</span>)<br>  &#125;,[])<br>  <span class="hljs-comment">// 传入特定依赖项 初始 + 依赖项变化时执行</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;含依赖项&#x27;</span>)<br>  &#125;,[count])<br> <span class="hljs-keyword">return</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span> setCount(count+1)&#125;&gt;&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="useEffect-清除副作用"><a href="#useEffect-清除副作用" class="headerlink" title="useEffect-清除副作用"></a>useEffect-清除副作用</h4><p>在useEffect中编写的副作用操作,想在组件卸载时再清理掉,该过程即为<strong>清理副作用</strong></p><p><strong>语法:</strong> </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span>&#123;<br>    <span class="hljs-comment">//实现副作用的操作</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">//清除副作用逻辑</span><br>&#125;<br><br>&#125;,[])<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;定时器执行中&#x27;</span>)<br>    &#125;,<span class="hljs-number">1000</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-comment">// 清除副作用</span><br>      <span class="hljs-built_in">clearInterval</span>(timer)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>This is son<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [show,setShow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>)<br> <span class="hljs-keyword">return</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>/&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>setShow(false)&#125;&gt;卸载Son组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> )<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="其他useHooks函数"><a href="#其他useHooks函数" class="headerlink" title="其他useHooks函数"></a>其他useHooks函数</h3><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><p><strong>作用：</strong> 和useState类似，用于管理相对复杂的状态数据，对于需要复杂操作的状态变量，该函数比<code>useState</code>更具优势。</p><p><strong>语法：</strong></p><p>reducer函数：<code>reducer(state,action)</code></p><p>管理状态变量：<code>switch(action.type)&#123;case:...&#125;</code></p><p>调起useHooks方法 注册状态变量：<code>const [state,dispatch] = useReducer(reducer,defaultValue)</code></p><p>使用dispatch方法操作状态变量：<code>dispatch(&#123;type:&#39;ACTION&#39;&#125;)</code></p><h6 id="useReducer-基础用法"><a href="#useReducer-基础用法" class="headerlink" title="useReducer-基础用法"></a>useReducer-基础用法</h6><ol><li><p>定义一个reducer函数（<em>根据不同的action返回不同的状态</em>）</p></li><li><p>在组件中调用useReducer，并传入reducer函数和状态的初始值</p></li><li><p>事件发生时，通过dispatch函数分派一个action对象（通知reducer要返回哪个新状态并渲染UI）</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-comment">// 1.定义reducer函数，根据不同的action返回不同的状态</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state,action</span>)&#123;<br>  <span class="hljs-keyword">switch</span>(action.<span class="hljs-property">type</span>)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;INC&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;DEC&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-comment">// 2.组件中调用useReducer(reducer,0) =&gt;[state,dispatch]</span><br>  <span class="hljs-keyword">const</span> [state,dispatch] = <span class="hljs-title function_">useReducer</span>(reducer,<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// 3.调用dispa tch(&#123;type:&#x27;INC&#x27;&#125;) =&gt;通知reducer产生新的状态来更新UI</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123; type:&#x27;INC&#x27; &#125;)&#125;&#125;&gt;</span><br><span class="language-xml">          count is &#123;state&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123; type:&#x27;DEC&#x27; &#125;)&#125;&#125;&gt;</span><br><span class="language-xml">          count is &#123;state&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="useReducer-分派action时传参"><a href="#useReducer-分派action时传参" class="headerlink" title="useReducer-分派action时传参"></a>useReducer-分派action时传参</h5><p>在<code>dispatch(&#123;...,payload:value&#125;)</code>中传参时，需要在<code>reducer</code>函数中使用<code>action.payload</code>接收</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state,action</span>)&#123;<br>  <span class="hljs-keyword">switch</span>(action.<span class="hljs-property">type</span>)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;SET&#x27;</span>:<br>      <span class="hljs-keyword">return</span> action.<span class="hljs-property">payload</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br><span class="hljs-comment">// ...</span><br>        &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;SET&#x27;</span>,<span class="hljs-attr">payload</span>:<span class="hljs-number">100</span> &#125;)&#125;&#125;&gt;<br>          <span class="hljs-title class_">Update</span> count to <span class="hljs-number">100</span><br>        &lt;/button&gt;<br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pE8R458"><img src="https://s21.ax1x.com/2025/03/01/pE8R458.png" alt="pE8R458.png"></a></p><h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><p><strong>作用：</strong> 在组件每次重新渲染时<strong>缓存计算的结果</strong>，由此保证只有列表内的依赖项（即需要改变的状态变量）改变时再重新计算，从而避免不必要的组件重复渲染</p><p><strong>语法：</strong> <code>useMemo(()=&gt;&#123;&#125;,[state])</code></p><p><strong>备注：</strong> 消耗非常大的计算</p><h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h4><p><strong>作用：</strong> 在组件多次重新渲染的时候<em>缓存函数</em></p><p><strong>语法：</strong> <code>const changeHandler = useCallback((value) =&gt; console.log(),[])</code></p><p><strong>作用：</strong> 使用useCallback包裹函数后，函数可以保证在app<em>重新渲染时保持稳定</em></p><h3 id="自定义Hook函数"><a href="#自定义Hook函数" class="headerlink" title="自定义Hook函数"></a>自定义Hook函数</h3><h4 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h4><p><strong>概念:</strong> 自定义Hook是以<em>use</em> 打头的函数,通过自定义Hook函数可以实现逻辑的封装和复用</p><p><strong>思路:</strong></p><ol><li><p>声明一个以use打头的函数</p></li><li><p>在函数体内封装可复用的逻辑</p></li><li><p>把组件中用到的状态或者回调return出去</p></li><li><p>在哪个组件中要用到这个逻辑,就执行这个函数,解构出状态和相应的回调</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useToggle</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> [value,setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">toggle</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setValue</span>(!value)<br>  <span class="hljs-comment">// 哪些状态和回调函数需要就在其他组件中使用return</span><br>  <span class="hljs-keyword">return</span>&#123;<br>    value,toggle<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;value,toggle&#125; = <span class="hljs-title function_">useToggle</span>()<br> <span class="hljs-keyword">return</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &#123;value &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>This is div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;toggle&#125;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> )<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="React-Hooks函数使用规则"><a href="#React-Hooks函数使用规则" class="headerlink" title="React Hooks函数使用规则"></a>React Hooks函数使用规则</h4><ol><li><p>只能在组件中或者其他自定义Hook函数中调用</p></li><li><p>只能在组件的顶层调用,不能嵌套在if&#x2F;for&#x2F;其他函数等</p></li></ol><h2 id="React方法"><a href="#React方法" class="headerlink" title="React方法"></a>React方法</h2><h3 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h3><h4 id="React-memo-基本用法"><a href="#React-memo-基本用法" class="headerlink" title="React.memo-基本用法"></a>React.memo-基本用法</h4><p><strong>背景：</strong> React默认渲染机制，只要父组件重新渲染，子组件就会重新渲染</p><p><strong>作用：</strong> 经过memo函数包裹生产的缓存组件会在<strong>Props没有改变</strong>的情况下跳过渲染</p><p><strong>语法：</strong> <code>const MemoComponet = memo(function SomeComponent (props)&#123;...&#125;)</code></p><h4 id="React-memo-props的比较机制"><a href="#React-memo-props的比较机制" class="headerlink" title="React.memo-props的比较机制"></a>React.memo-props的比较机制</h4><p><strong>机制：</strong> React会对每一个prop使用<code>Object.is</code>比较新值和老值，返回true表示无变化</p><ul><li><p>props是简单类型<br><code>Object.is(3,3)=&gt;true</code><br>没变化</p></li><li><p>props是引用类型（数组&#x2F;对象）<br><code>Object.is([],[])=&gt;false</code><br>有变化，当父组件的函数重新执行时，实际上形成的新的数组引用</p></li></ul><p>为了保证引用稳定，可以使用useMemo组件渲染过程中缓存一个值</p><h3 id="React-forwardRef"><a href="#React-forwardRef" class="headerlink" title="React.forwardRef"></a>React.forwardRef</h3><h4 id="React-fowardRef基本用法"><a href="#React-fowardRef基本用法" class="headerlink" title="React.fowardRef基本用法"></a>React.fowardRef基本用法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props,ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span></span><br>  )<br>&#125;)<br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-comment">// 2.组件中调用useReducer(reducer,0) =&gt;[state,dispatch]</span><br><br>  <span class="hljs-comment">// 3.调用dispatch(&#123;type:&#x27;INC&#x27;&#125;) =&gt;通知reducer产生新的状态来更新UI</span><br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">showRef</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inputRef)  <br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;showRef&#125;</span>&gt;</span>获取ref<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="React-useInperativeHandle"><a href="#React-useInperativeHandle" class="headerlink" title="React.useInperativeHandle"></a>React.useInperativeHandle</h4><p><strong>作用：</strong> 在子组件内部实现对ref方法的暴露，以便于调用</p><p><strong>语法：</strong> </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props,ref</span>)=&gt;</span><br>&#123;<br>    <span class="hljs-keyword">const</span> inputref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">focusHandler</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>()<br>&#125;<br><br><span class="hljs-title function_">useImperativeHandle</span>(ref,<span class="hljs-function">() =&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>    focusHandler<br>&#125;<br>&#125; )<br>&#125;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="5-Redux"><a href="#5-Redux" class="headerlink" title="5.Redux"></a>5.Redux</h1><h2 id="Redux上手"><a href="#Redux上手" class="headerlink" title="Redux上手"></a>Redux上手</h2><h3 id="Redux快速体验"><a href="#Redux快速体验" class="headerlink" title="Redux快速体验"></a>Redux快速体验</h3><p>Redux 是 JavaScript 应用的状态容器，提供可预测的状态管理。</p><p><a href="https://imgse.com/i/pEAsEzq"><img src="https://s21.ax1x.com/2025/01/22/pEAsEzq.png" alt="pEAsEzq.png"></a></p><p><strong>使用步骤:</strong></p><ol><li><p>定义一个<em>reducer函数</em>(根据当前想要做的修改返回一个新的状态)</p></li><li><p>使用createStore方法传入<em>reducer函数</em> 生成一个<em>reducer实例</em></p></li><li><p>使用<em>store实例</em>的<strong>subscribe方法</strong> 订阅数据的变化(数据一旦变化,可以得到通知)</p></li><li><p>使用<em>store实例</em>的<strong>dispatch方法提交action对象</strong> 触发数据变化(告诉<em>reducer</em> 你如何修改数据)</p></li><li><p>使用store实例的<strong>getState方法</strong> 获取最新的状态数据更新到视图中</p></li></ol><h3 id="Redux与React配套"><a href="#Redux与React配套" class="headerlink" title="Redux与React配套"></a>Redux与React配套</h3><h4 id="配套工具"><a href="#配套工具" class="headerlink" title="配套工具:"></a>配套工具:</h4><p>1.Redux Tookit</p><p>2.react-redux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs npmignore"><br>npm install react-redux<br><br>npm install redux-toolkit<br></code></pre></td></tr></table></figure><p><strong>store目录</strong></p><ol><li><p>通常集中状态管理部分单独创建一个<code>store</code>目录</p></li><li><p>应用通常会有很多个子store模块,所以会创建一个<code>modules</code>目录,在文件夹内编写业务分类的子store</p></li><li><p>store中的入口文件<code>index.js</code>的作用是组合modules中的所有子模块,并导出store</p></li></ol><h3 id="Redux-React-实现counter"><a href="#Redux-React-实现counter" class="headerlink" title="Redux+React &#x3D;&gt;实现counter"></a>Redux+React &#x3D;&gt;实现counter</h3><h4 id="整体路径"><a href="#整体路径" class="headerlink" title="整体路径"></a>整体路径</h4><p><a href="https://imgse.com/i/pEEuD1I"><img src="https://s21.ax1x.com/2025/01/24/pEEuD1I.png" alt="pEEuD1I.png"></a></p><h4 id="创建Redux的store对象"><a href="#创建Redux的store对象" class="headerlink" title="创建Redux的store对象"></a>创建Redux的store对象</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// ./modules/counterStore.js</span><br><span class="hljs-keyword">import</span> &#123;createSlice&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><br><span class="hljs-keyword">const</span> counterStore = <span class="hljs-title function_">createSlice</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;counter&#x27;</span>,<br>    <span class="hljs-comment">// 初始状态数据</span><br>    <span class="hljs-attr">initialState</span>:&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-comment">// 修改数据同步的方法</span><br>    <span class="hljs-attr">reducers</span>:&#123;<br>        <span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>)&#123;<br>            state.<span class="hljs-property">count</span>++<br>        &#125;,<br>        <span class="hljs-title function_">decrement</span>(<span class="hljs-params">state</span>)&#123;<br>            state.<span class="hljs-property">count</span>--<br>        &#125;,<br>    &#125;,<br><br>&#125;)<br><span class="hljs-comment">// 解构创建action对象的函数</span><br><span class="hljs-keyword">const</span> &#123;increment,decrement&#125; = counterStore.<span class="hljs-property">actions</span><br><span class="hljs-comment">// 获取reducer函数</span><br><span class="hljs-keyword">const</span> counterReducer = counterStore.<span class="hljs-property">reducer</span><br><span class="hljs-comment">// 导出action对象的函数和reducer函数</span><br><span class="hljs-keyword">export</span>&#123;increment,decrement&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> counterReducer<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> counterReducer  <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/counterStore&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>    <span class="hljs-attr">reducer</span>:&#123;<br>        <span class="hljs-attr">counter</span>:counterReducer<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><h4 id="为React注入store"><a href="#为React注入store" class="headerlink" title="为React注入store"></a>为React注入store</h4><p>react-redux负责把Redux和React链接起来,内置的Provider组件通过store参数把创建好的store实例注入到应用程序中,链接正式建立</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.jsx&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index.js&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Provider</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br>    ,<br>)<br><br></code></pre></td></tr></table></figure><h4 id="React组件中使用store中的数据"><a href="#React组件中使用store中的数据" class="headerlink" title="React组件中使用store中的数据"></a>React组件中使用store中的数据</h4><p>在React组件中使用<code>store</code>中的数据,需要用到一个钩子函数<code>useSelector(state =&gt; state.Variable)</code></p><p><strong>作用:</strong> 将store中的数据映射到组件中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//App.jsx</span><br><span class="hljs-keyword">import</span> &#123; useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;count&#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">counter</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;count&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br><br></code></pre></td></tr></table></figure><p><em>注意:</em> 该例子中App.jsx中的counter实际定义在store中的入口,即<code>index.js</code></p><h4 id="React组件中修改store的数据"><a href="#React组件中修改store的数据" class="headerlink" title="React组件中修改store的数据"></a>React组件中修改store的数据</h4><p>React组件中修改store中的数据需要借助<code>useDispatch()</code>的hook函数</p><p><strong>作用:</strong> 生成提交<em>action对象</em>的函数</p><h3 id="Redux-React-提交action传参"><a href="#Redux-React-提交action传参" class="headerlink" title="Redux+React - 提交action传参"></a>Redux+React - 提交action传参</h3><h4 id="提交action传参实现需求"><a href="#提交action传参实现需求" class="headerlink" title="提交action传参实现需求"></a>提交action传参实现需求</h4><p>在reduers的同步修改方法中添加action对象参数,在调用<code>actionCreater</code>时传递参数,参数会被传递到<code>action</code>对象的<code>payload</code>属性上.</p><h3 id="Redux-React-异步状态管理"><a href="#Redux-React-异步状态管理" class="headerlink" title="Redux+React - 异步状态管理"></a>Redux+React - 异步状态管理</h3><h4 id="异步操作样板写法"><a href="#异步操作样板写法" class="headerlink" title="异步操作样板写法"></a>异步操作样板写法</h4><ol><li><p>创建store的写法保持不变,配置好同步修改状态的方法</p></li><li><p>单独封装一个函数,在函数内return一个新函数,在新函数中<br>2.1 封装异步请求获取数据<br>2.2 调用<strong>同步actionCreater</strong> 传入异步数据生成action对象,使用dispatch提交</p></li><li><p>组件中<code>dispatch</code>的写法不变</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//chaannelStore.js</span><br><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">const</span> channelStore =  <span class="hljs-title function_">createSlice</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;channel&#x27;</span>,<br>    <span class="hljs-attr">initialState</span>:&#123;<br>        <span class="hljs-attr">channelList</span>:[]<br>    &#125;,<br>    <span class="hljs-attr">reducers</span>:&#123;<br>        <span class="hljs-title function_">setChannels</span>(<span class="hljs-params">state,action</span>)&#123;<br>            state.<span class="hljs-property">channelList</span> = action.<span class="hljs-property">payload</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// 异步请求</span><br><span class="hljs-keyword">const</span> &#123;setChannels&#125; = channelStore.<span class="hljs-property">actions</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchChannelList</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">async</span> (dispatch)=&gt;&#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span>)<br>        <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">setChannels</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">channels</span>))<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123;fetchChannelList,setChannels&#125;<br><span class="hljs-keyword">const</span> channelReducer = channelStore.<span class="hljs-property">reducer</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> channelReducer<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> counterReducer  <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/counterStore&quot;</span>;<br><span class="hljs-keyword">import</span> channelReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/channelStore&quot;</span>;<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>    <span class="hljs-attr">reducer</span>:&#123;<br>        <span class="hljs-attr">counter</span>:counterReducer,<br>        <span class="hljs-attr">channel</span>:channelReducer,<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//App.jsx</span><br><span class="hljs-keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span><br><span class="hljs-keyword">import</span> &#123; decrement, increment,addToNum&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/modules/counterStore&quot;</span><br><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">import</span> &#123; fetchChannelList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/modules/channelStore&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;count&#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">counter</span>)<br>  <span class="hljs-keyword">const</span> &#123;channelList&#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">channel</span>)<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br>  <span class="hljs-comment">// 使用useEffect触发异步</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">fetchChannelList</span>())<br>  &#125;,[dispatch])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>dispatch(decrement())&#125;&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;count&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>dispatch(increment())&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>dispatch(addToNum(20))&#125;&gt;+20<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;channelList.map(item=&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-ReactRouter"><a href="#6-ReactRouter" class="headerlink" title="6.ReactRouter"></a>6.ReactRouter</h1><h2 id="ReactRouter应用"><a href="#ReactRouter应用" class="headerlink" title="ReactRouter应用"></a>ReactRouter应用</h2><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p><strong>前端路由</strong>:一个path对应一个组件component,当我们在浏览器中访问一个path时,path对应的组件会在页面中进行渲染</p><h4 id="创建路由开发环境"><a href="#创建路由开发环境" class="headerlink" title="创建路由开发环境"></a>创建路由开发环境</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm create vite@latest<br>...<br>npm i react<span class="hljs-literal">-router-dom</span><br>...<br>npm run dev<br></code></pre></td></tr></table></figure><h4 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 调包</span><br><span class="hljs-keyword">import</span> &#123;createBrowserRouter ,<span class="hljs-title class_">RouterProvider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-comment">// 1.创建Router实例对象,配置路由对应关系</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是登录<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/article&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是文章页<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>])<br><span class="hljs-comment">// 2.在渲染DOM中通过RouterProvider组件的router属性传入router对象</span><br><span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">RouterProvider</span> <span class="hljs-attr">router</span>=<span class="hljs-string">&#123;router&#125;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">RouterProvider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">StrictMode</span>&gt;</span></span>,<br>)<br><br><br></code></pre></td></tr></table></figure><h3 id="抽象路由模块"><a href="#抽象路由模块" class="headerlink" title="抽象路由模块"></a>抽象路由模块</h3><p><strong>在实际工程项目中的配置:</strong></p><p><a href="https://imgse.com/i/pEelZ6J"><img src="https://s21.ax1x.com/2025/02/05/pEelZ6J.png" alt="ReactRouter配置"></a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-comment">// ./router/index.js</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../page/login&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Article</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../page/article&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123;createBrowserRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span>/&gt;</span></span>,<br>&#125;,<br>&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/article&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Article</span>/&gt;</span></span>,<br>&#125;<br>])<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> </p><p>在router注册组件时,<strong>组件名一定要首字母大写!!!</strong></p><h3 id="路由导航跳转"><a href="#路由导航跳转" class="headerlink" title="路由导航跳转"></a>路由导航跳转</h3><p><strong>概念:</strong> 路由系统中的多个路由之间需要进行<em>路由跳转</em>,并且在跳转的同时有可能需要传递参数进行通信.</p><h4 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h4><p>在模板中通过<code>&lt;Link to=&quot;&quot;/&gt;</code>组件描述要跳转的路由.</p><p>其中,<code>to=&#39;&#39;</code>属性指定要跳转的路由path,也可使用模板字符串拼接.</p><h4 id="命令式导航"><a href="#命令式导航" class="headerlink" title="命令式导航"></a>命令式导航</h4><p>在模板中通过<code>useNavigate()</code>的hooks函数绑定在需要的DOM事件上.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// ./page/login/index.jsx</span><br><br><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Link</span>,useNavigate&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Login</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>()<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 声明式写法 调用Link组件 编译为超链接 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/article&quot;</span>&gt;</span> 跳转到文章页<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 命令式写法 调用useNavigate的hooks函数 绑定在DOM的事件上 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(&#x27;/article&#x27;)&#125;&gt;跳转到文章页<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Login</span><br><br><br></code></pre></td></tr></table></figure><h3 id="路由导航传参"><a href="#路由导航传参" class="headerlink" title="路由导航传参"></a>路由导航传参</h3><h4 id="searchParams传参"><a href="#searchParams传参" class="headerlink" title="searchParams传参"></a>searchParams传参</h4><p><strong>格式:</strong><code>/router?id=111&amp;name=222</code></p><p>取参函数:<code>useSearchParams()</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// login.jsx</span><br>&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/article?id=1001&amp;name=jack&#x27;</span>)&#125;&gt;searchParams传参&lt;/button&gt;<br><br><span class="hljs-comment">//article.jsx</span><br><span class="hljs-keyword">const</span> [params] = <span class="hljs-title function_">useSearchParams</span>()<br>    <span class="hljs-keyword">const</span> id = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;id&#x27;</span>)<br>    <span class="hljs-keyword">const</span> name = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="Params传参"><a href="#Params传参" class="headerlink" title="Params传参"></a>Params传参</h4><p><strong>格式:</strong><code>/router/:id/:name</code></p><p>取参函数:<code>useParams()</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-comment">// ./router/index.jsx</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([<br>&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/article/:id/:name&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Article</span>/&gt;</span></span>,<br>&#125;<br>])<br><br><span class="hljs-comment">//login.jsx</span><br><br>&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/article/1001/jack&#x27;</span>)&#125;&gt;<span class="hljs-title class_">Params</span>传参&lt;/button&gt;<br><br><br><span class="hljs-comment">//article.jsx</span><br><span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>()<br><span class="hljs-keyword">const</span> id = params.<span class="hljs-property">id</span><br><span class="hljs-keyword">const</span> name = params.<span class="hljs-property">name</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是文章&#123;id&#125;-&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> 使用Params传参时,需要预先在路由文件下指定好匹配的对象名</p><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><h4 id="什么是嵌套路由"><a href="#什么是嵌套路由" class="headerlink" title="什么是嵌套路由"></a>什么是嵌套路由</h4><p>在一级路由中嵌套其他路由,这种关系叫做嵌套路由.嵌套至一级路由内的路由称作二级路由</p><h4 id="嵌套路由配置"><a href="#嵌套路由配置" class="headerlink" title="嵌套路由配置"></a>嵌套路由配置</h4><p><strong>实现步骤</strong></p><ol><li><p>使用<code>children</code>属性</p></li><li><p>使用<code>&lt;Outlet/&gt;</code> 组件渲染二级路由渲染位置</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-comment">// ./router/index.jsx</span><br><span class="hljs-comment">// react路由组件注册</span><br><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span>/&gt;</span></span>,<br>&#125;,<br>&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/article/:id&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Article</span>/&gt;</span></span>,<br>&#125;,&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>:[<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;board&#x27;</span>,<br>            <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Board</span>/&gt;</span></span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;about&#x27;</span>,<br>            <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span> /&gt;</span></span><br>        &#125;<br>    ]<br>&#125;<br>])<br><br><span class="hljs-comment">// ./page/Layout/index.jsx</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Layout</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    <span class="hljs-keyword">return</span>(<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            瓦塔西一级路由Layout组件</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/board&quot;</span>&gt;</span>面板1<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">            &#123;/*  二级路由出口     */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Layout</span><br></code></pre></td></tr></table></figure><h3 id="默认二级路由"><a href="#默认二级路由" class="headerlink" title="默认二级路由"></a>默认二级路由</h3><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><p>在二级路由的位置去掉<code>path</code>,设置<code>index</code>属性为<code>true</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// ./router/index.jsx</span><br><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span>/&gt;</span></span>,<br>&#125;,<br>&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/article/:id&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Article</span>/&gt;</span></span>,<br>&#125;,&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>:[<br>        <span class="hljs-comment">// 设置为默认二级路由</span><br>        &#123;<br>            <span class="hljs-attr">index</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Board</span>/&gt;</span></span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;about&#x27;</span>,<br>            <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span> /&gt;</span></span><br>        &#125;<br>    ]<br>&#125;<br>])<br></code></pre></td></tr></table></figure><h3 id="404路由"><a href="#404路由" class="headerlink" title="404路由"></a>404路由</h3><p>场景:找不到对应path时,提示404页面</p><p><strong>实现步骤:</strong> </p><ol><li><p>准备NotFound组件</p></li><li><p>在路由表尾注册<code>*</code>为path的路由</p></li></ol><p>形如:</p><p>&#96;{</p><p>    path:’*’,</p><p>    element:<NotFound/></p><p>}&#96;</p><h3 id="两种路由模式"><a href="#两种路由模式" class="headerlink" title="两种路由模式"></a>两种路由模式</h3><p>主流框架常见的路由方式有两种,<strong>history模式和hash模式</strong>.</p><p>在React中分别由<code>createBrowerRoute</code>和<code>createHsahRouter</code>函数负责创建</p><table><thead><tr><th>路由模式</th><th>url表现</th><th>底层原理</th><th>是否需要后端支持</th></tr></thead><tbody><tr><td>history</td><td>url&#x2F;login</td><td>history对象+pushState事件</td><td>需要</td></tr><tr><td>hash</td><td>url&#x2F;#&#x2F;login</td><td>监听hashChange事件</td><td>不需要</td></tr></tbody></table><h1 id="7-项目实战-记账本"><a href="#7-项目实战-记账本" class="headerlink" title="7.项目实战-记账本"></a>7.项目实战-记账本</h1><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="项目依赖安装"><a href="#项目依赖安装" class="headerlink" title="项目依赖安装"></a>项目依赖安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs npmignore">npm create vite@latest<br>...<br>npm i react-router-dom dayjs classnames antd-mobile axios<br></code></pre></td></tr></table></figure><h3 id="git提交"><a href="#git提交" class="headerlink" title="git提交"></a>git提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">git init<br>// 仓库初始化<br>git add .<br>// 仓库更新<br>git commit -m &quot;&quot;<br>// 仓库提交 -m后跟提交内容的备注<br></code></pre></td></tr></table></figure><h3 id="Vite实现配置别名路径"><a href="#Vite实现配置别名路径" class="headerlink" title="Vite实现配置别名路径"></a>Vite实现配置别名路径</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-react&#x27;</span><br><br><span class="hljs-comment">// https://vite.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>()],<br>  <span class="hljs-attr">resolve</span>:&#123;<br>    <span class="hljs-attr">alias</span>:&#123;<br>      <span class="hljs-comment">// eslint-disable-next-line no-undef</span><br>      <span class="hljs-string">&#x27;@&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname,<span class="hljs-string">&#x27;src&#x27;</span>),<br>    &#125;,<br>  &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="VS-Code配置别名路径高亮"><a href="#VS-Code配置别名路径高亮" class="headerlink" title="VS Code配置别名路径高亮"></a>VS Code配置别名路径高亮</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// ./jsconfig.json</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ES6&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// 基础目录作为项目根目录, 这应该指向包含 `src` 目录的路径</span><br>      <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// @ 作为 src目录别名</span><br>        <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/*&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// VS Code 将 `@` 解析为 `src` 目录</span><br><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;node_modules&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dist&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// &quot;...其他要排除的目录&quot;</span><br>    <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/**/*&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="数据Mock"><a href="#数据Mock" class="headerlink" title="数据Mock"></a>数据Mock</h3><p>数据Mock是指通过模拟真实数据来测试系统功能，确保系统在无真实数据或无法获取真实数据时仍能正常运行。Mock数据通常用于开发、测试和演示，帮助开发者在早期阶段验证逻辑和接口。</p><h4 id="在前端开发中常见的数据Mock种类"><a href="#在前端开发中常见的数据Mock种类" class="headerlink" title="在前端开发中常见的数据Mock种类"></a>在前端开发中常见的数据Mock种类</h4><ol><li><p><strong>静态Mock数据</strong>：</p><ul><li><p>预先定义好的固定数据，通常存储在JSON、XML或CSV文件中。</p></li><li><p>适用于简单的测试场景。</p></li></ul></li><li><p><strong>动态Mock数据</strong>：</p><ul><li><p>在运行时生成的数据，模拟真实数据的动态变化。</p></li><li><p>适用于复杂场景，如模拟用户行为或实时数据流。</p></li></ul></li><li><p><strong>接口Mock</strong>：</p><ul><li><p>模拟API接口的响应，用于测试API调用。</p></li><li><p>适用于前后端分离开发或第三方API不可用时的测试。</p></li></ul></li></ol><h4 id="在前端开发中常见的Mock工具"><a href="#在前端开发中常见的Mock工具" class="headerlink" title="在前端开发中常见的Mock工具"></a>在前端开发中常见的Mock工具</h4><ol><li><p><strong>静态Mock数据工具</strong>：</p><ul><li><p><strong>JSON Server</strong>：基于JSON文件的REST API模拟工具，可以快速搭建一个本地的Mock服务器。</p></li><li><p><strong>Faker.js</strong>：生成虚假数据的JavaScript库，可以生成各种类型的虚假数据，如姓名、地址、电话号码等。</p></li></ul></li><li><p><strong>动态Mock数据工具</strong>：</p><ul><li><p><strong>Mock.js</strong>：生成随机数据的JavaScript库，支持生成各种类型的随机数据，并且可以定义数据模板。</p></li><li><p><strong>Faker</strong>（Python）：生成虚假数据的Python库，适用于需要在Python环境中生成Mock数据的场景。</p></li></ul></li><li><p><strong>接口Mock工具</strong>：</p><ul><li><p><strong>Postman Mock Server</strong>：Postman提供的API模拟服务，可以快速创建Mock服务器并定义API响应。</p></li><li><p><strong>WireMock</strong>：用于HTTP API的模拟工具，支持Java，适用于需要在Java环境中进行API Mock的场景。</p></li></ul></li></ol><h4 id="配置json-server"><a href="#配置json-server" class="headerlink" title="配置json-server"></a>配置json-server</h4><ol><li><p><strong>在项目中安装json-server</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npmignore">npm i -D json-server<br></code></pre></td></tr></table></figure></li><li><p>准备json文件</p></li><li><p>添加启动命令</p></li><li><p>访问接口并调试</p></li></ol><h3 id="整体路由设计"><a href="#整体路由设计" class="headerlink" title="整体路由设计"></a>整体路由设计</h3><p><a href="https://imgse.com/i/pEnJsw4"><img src="https://s21.ax1x.com/2025/02/10/pEnJsw4.png" alt="pEnJsw4.png"></a></p><ol><li><p>2个一级路由(Layout&#x2F;New)</p></li><li><p>2个二级路由(Layout-month&#x2F;year)</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// @/router/index.jsx</span><br><span class="hljs-comment">// 创建路由实例</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Layout/index&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Month</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Month/index&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">New</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/New/index&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Year</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Year/index&#x27;</span><br><span class="hljs-keyword">import</span> &#123;createBrowserRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>/&gt;</span></span>,<br>    <span class="hljs-attr">children</span>:[<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;month&#x27;</span>,<br>            <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Month</span>/&gt;</span></span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;year&#x27;</span>,<br>            <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Year</span>/&gt;</span></span><br>        &#125;<br>    ]<br>&#125;,&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/new&#x27;</span>,<br>    <span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">New</span>/&gt;</span></span><br>&#125;<br>])<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br><br></code></pre></td></tr></table></figure><h3 id="antD-mobile主题定制"><a href="#antD-mobile主题定制" class="headerlink" title="antD-mobile主题定制"></a>antD-mobile主题定制</h3><p><strong>定制方案:</strong></p><ol><li><p>全局定制</p></li><li><p>局部定制</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div className=<span class="hljs-string">&quot;purple-theme&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>局部测试<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h1 id="Zustand"><a href="#Zustand" class="headerlink" title="Zustand"></a>Zustand</h1><h2 id="Zustand快速上手"><a href="#Zustand快速上手" class="headerlink" title="Zustand快速上手"></a>Zustand快速上手</h2><h3 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h3><p><strong>语法：</strong> <code>const useStore = create((set)=&gt;&#123;return&#123;...&#125;)</code></p><h3 id="创建状态方法："><a href="#创建状态方法：" class="headerlink" title="创建状态方法："></a>创建状态方法：</h3><p><strong>语法：</strong><code>action:()=&gt;&#123;set((state)=&gt;(&#123;count:state.count + 1&#125;))&#125;</code></p><p><strong>注意：</strong></p><ol><li><p>函数参数必须返回一个对象 对象内部编写状态数据和方法</p></li><li><p>set是用来修改数据的专门方法，必须调用它来修改数据<br>语法1：参数是函数 需要使用老数据 需要用箭头函数的块内操作<br><code>set((state)=&gt;(&#123;count:state.count + 1&#125;))</code><br>语法2：参数直接是一个对象<br><code>set(&#123;count:100&#125;)</code></p></li></ol><h3 id="zustand-异步支持"><a href="#zustand-异步支持" class="headerlink" title="zustand-异步支持"></a>zustand-异步支持</h3><p>对于异步的支持不需要特殊的操作,直接在函数中编写异步逻辑,最后调用set方法传入新状态即可,记得解构并在主函数中使用useEffect调起该异步方法</p><h3 id="zustand-切片模式"><a href="#zustand-切片模式" class="headerlink" title="zustand-切片模式"></a>zustand-切片模式</h3><p>当单个store较大时,可以采用<strong>切片模式</strong>组合各个模块</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createCounterStore</span> = (<span class="hljs-params">set</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 状态数据</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-comment">// 修改状态数据的方法</span><br>    <span class="hljs-attr">inc</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">set</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123; <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span> &#125;))<br>    &#125;,<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createChannelStore</span> = (<span class="hljs-params">set</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">channelList</span>: [],<br>    <span class="hljs-attr">fetchGetList</span>: <span class="hljs-title function_">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-variable constant_">URL</span>)<br>      <span class="hljs-keyword">const</span> jsonRes = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonRes)<br>      <span class="hljs-title function_">set</span>(&#123;<br>        <span class="hljs-attr">channelList</span>: jsonRes.<span class="hljs-property">data</span>.<span class="hljs-property">channels</span><br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> useStore = <span class="hljs-title function_">create</span>(<span class="hljs-function">(<span class="hljs-params">...a</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    ...<span class="hljs-title function_">createCounterStore</span>(...a),<br>    ...<span class="hljs-title function_">createChannelStore</span>(...a)<br>  &#125;<br>&#125;)<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 2. 组件使用</span><br>  <span class="hljs-keyword">const</span> &#123; count, inc, fetchGetList, channelList &#125; = <span class="hljs-title function_">useStore</span>()<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">fetchGetList</span>()<br>  &#125;, [fetchGetList])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;inc&#125;</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          channelList.map(item =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><br><span class="hljs-keyword">import</span> &#123;create&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zustand&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span><br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> useStore = <span class="hljs-title function_">create</span>(<span class="hljs-function">(<span class="hljs-params">set</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">inc</span>:<span class="hljs-function">() =&gt;</span>&#123;<br>      <span class="hljs-title function_">set</span>(<span class="hljs-function">(<span class="hljs-params">state</span>)=&gt;</span>(&#123;<br>        <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span><br>      &#125;))<br>    &#125;<br>  &#125;<br>&#125;)<br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">const</span> &#123;count,inc&#125; = <span class="hljs-title function_">useStore</span>()<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">     This is app.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;inc&#125;</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="React-TS"><a href="#React-TS" class="headerlink" title="React+TS"></a>React+TS</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="使用Vite创建TS的React项目"><a href="#使用Vite创建TS的React项目" class="headerlink" title="使用Vite创建TS的React项目"></a>使用Vite创建TS的React项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create vite@latest my-vue-app -- --template react-ts<br>npm install<br>npm run dev<br></code></pre></td></tr></table></figure><h2 id="useState与TS"><a href="#useState与TS" class="headerlink" title="useState与TS"></a>useState与TS</h2><h3 id="useState-自动推导"><a href="#useState-自动推导" class="headerlink" title="useState-自动推导"></a>useState-自动推导</h3><p>通常React会根据传入的useState的默认值来自动推导类型，并不需要显式标注类型</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><br><span class="hljs-keyword">const</span> [value,toogle] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">changeValue</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    <span class="hljs-title function_">toogle</span>(<span class="hljs-literal">true</span>)<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="useState-传递泛型参数"><a href="#useState-传递泛型参数" class="headerlink" title="useState- 传递泛型参数"></a>useState- 传递泛型参数</h3><p>useState本身是一个泛型函数，可以传入具体的自定义类型。</p><blockquote><p><strong>关于泛型的含义：</strong> <a href="https://typescript.p6p.net/typescript-tutorial/generics.html">TypeScript 泛型</a></p><p><a href="https://www.runoob.com/typescript/ts-generics.html">TypeScript 泛型 | 菜鸟教程</a></p><p><strong>简单来说：</strong> 泛型（Generics）是一种编程语言特性，允许在定义函数、类、接口等时使用占位符来表示类型，而不是具体的类型。</p><p><strong>泛型函数:</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> identity&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br><br><span class="hljs-comment">// 使用泛型函数</span><br><span class="hljs-keyword">let</span> result = identity&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: Hello</span><br><br><span class="hljs-keyword">let</span> numberResult = identity&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">42</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(numberResult); <span class="hljs-comment">// 输出: 42</span><br></code></pre></td></tr></table></figure><p><strong>泛型接口:</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 基本语法</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Pair</span>&lt;T, U&gt; &#123;<br>    <span class="hljs-attr">first</span>: T;<br>    <span class="hljs-attr">second</span>: U;<br>&#125;<br><br><span class="hljs-comment">// 使用泛型接口</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">pair</span>: <span class="hljs-title class_">Pair</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>&gt; = &#123; <span class="hljs-attr">first</span>: <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-attr">second</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pair); <span class="hljs-comment">// 输出: &#123; first: &#x27;hello&#x27;, second: 42 &#125;</span><br></code></pre></td></tr></table></figure><p><strong>泛型类:</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 基本语法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">value</span>: T;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">value</span>: T</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>    &#125;<br><br>    <span class="hljs-title function_">getValue</span>(): T &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用泛型类</span><br><span class="hljs-keyword">let</span> stringBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;TypeScript&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stringBox.<span class="hljs-title function_">getValue</span>()); <span class="hljs-comment">// 输出: TypeScript</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>说明:</strong></p><ol><li><p>限制useState函数参数的初始值类型必须满足<code>User | () =&gt; User</code></p></li><li><p>限制setUser函数的参数必须满足类型为<code>User | () =&gt; User | undefined</code></p></li><li><p>User状态数据必须具备User类型相关的类型提示</p></li><li><p>若不知道状态变量的初始值，可设置为null</p></li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">User</span> = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-title class_">String</span><br>    <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> [user,setUser] = useState&lt;<span class="hljs-title class_">User</span>&gt;(<br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Jack&#x27;</span>,<br>      <span class="hljs-attr">age</span>:<span class="hljs-number">12</span><br>    &#125;<br>  )<br>  <span class="hljs-keyword">const</span> [users,setUsers] = useState&lt;<span class="hljs-title class_">User</span>| <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>)<br><br><br></code></pre></td></tr></table></figure><h2 id="props与TypeScript"><a href="#props与TypeScript" class="headerlink" title="props与TypeScript"></a>props与TypeScript</h2><h3 id="props-基础使用"><a href="#props-基础使用" class="headerlink" title="props - 基础使用"></a>props - 基础使用</h3><p>为组件prop添加类型，本质上是个函数的参数做<strong>类型注解</strong>，可以使用<strong>type</strong>对象类型或者<strong>interface</strong>接口来做注解</p><blockquote><p><strong>关于interface接口：</strong></p><p><a href="https://www.runoob.com/typescript/ts-interface.html">TypeScript 接口 | 菜鸟教程</a></p><p><a href="https://typescript.p6p.net/typescript-tutorial/interface.html">TypeScript 的 interface 接口 </a></p><p>interface 是对象的模板，可以看作是一种类型约定，中文译为“接口”。使用了某个模板的对象，就拥有了指定的类型结构。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>关于type类型：</strong></p><p><a href="https://typescript.p6p.net/typescript-tutorial/types.html">TypeScript 的类型系统</a></p><p><code>type</code>命令用来定义一个类型的别名。别名可以让类型的名字变得更有意义，也能增加代码的可读性，还可以使复杂类型用起来更方便，便于以后修改变量的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Age</span> = <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-title class_">Age</span> = <span class="hljs-number">55</span>;<br></code></pre></td></tr></table></figure><p> 主要区别如下：</p><hr><h3 id="1-声明合并（Declaration-Merging）"><a href="#1-声明合并（Declaration-Merging）" class="headerlink" title="1. 声明合并（Declaration Merging）"></a>1. <strong>声明合并（Declaration Merging）</strong></h3><ul><li><p><strong><code>interface</code></strong>：支持声明合并。同一个名称的多个 <code>interface</code> 会自动合并。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span> &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; &#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span> &#123; <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>; &#125;<br><span class="hljs-comment">// 合并为 &#123; name: string; age: number; &#125;</span><br></code></pre></td></tr></table></figure></li><li><p><strong><code>type</code></strong>：不支持声明合并。同名 <code>type</code> 会报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">User</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; &#125;;  <br><span class="hljs-keyword">type</span> <span class="hljs-title class_">User</span> = &#123; <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>; &#125;; <span class="hljs-comment">// Error: Duplicate identifier &#x27;User&#x27;.</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="2-扩展方式"><a href="#2-扩展方式" class="headerlink" title="2. 扩展方式"></a>2. <strong>扩展方式</strong></h3><ul><li><p><strong><code>interface</code></strong>：用 <code>extends</code> 继承其他接口或对象类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> A &#123; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>; &#125;<br><span class="hljs-keyword">interface</span> B <span class="hljs-keyword">extends</span> A &#123; <span class="hljs-attr">y</span>: <span class="hljs-built_in">string</span>; &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>type</code></strong>：用 <code>&amp;</code> 交叉类型扩展。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> A = &#123; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>; &#125;;<br><span class="hljs-keyword">type</span> B = A &amp; &#123; <span class="hljs-attr">y</span>: <span class="hljs-built_in">string</span>; &#125;;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="3-灵活性"><a href="#3-灵活性" class="headerlink" title="3. 灵活性"></a>3. <strong>灵活性</strong></h3><ul><li><p><strong><code>interface</code></strong>：只能定义对象类型（包括函数、类等）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span> &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; &#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Func</span> &#123; (<span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">void</span>; &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>type</code></strong>：可以定义任意类型，包括原始类型、联合类型、元组等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Name</span> = <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 原始类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Value</span> = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 联合类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Point</span> = [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">number</span>]; <span class="hljs-comment">// 元组</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="4-性能与工具提示"><a href="#4-性能与工具提示" class="headerlink" title="4. 性能与工具提示"></a>4. <strong>性能与工具提示</strong></h3><ul><li><strong>工具提示（IntelliSense）</strong>：<br><code>interface</code> 在 VS Code 等工具中的提示更清晰（显示为 <code>interface</code>），而 <code>type</code> 会直接展开具体类型。</li><li><strong>性能</strong>：<br>对于复杂类型，<code>interface</code> 的检查可能略快（但实际差异很小）。</li></ul><hr><h3 id="5-类实现（implements）"><a href="#5-类实现（implements）" class="headerlink" title="5. 类实现（implements）"></a>5. <strong>类实现（<code>implements</code>）</strong></h3><ul><li><p><strong><code>interface</code></strong>：可以被类直接 <code>implements</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUser</span> &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUser</span> &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>type</code></strong>：如果 <code>type</code> 是对象类型，类也可以实现它。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">TUser</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; &#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TUser</span> &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; &#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="何时用哪个？"><a href="#何时用哪个？" class="headerlink" title="何时用哪个？"></a>何时用哪个？</h3><ul><li><strong>用 <code>interface</code></strong>：  <ul><li>需要声明合并（如扩展第三方库类型）。  </li><li>定义对象类型且需要清晰的工具提示。  </li><li>面向对象的类结构（<code>implements</code>）。</li></ul></li><li><strong>用 <code>type</code></strong>：  <ul><li>需要联合类型、元组、映射类型等高级功能。  </li><li>定义非对象类型（如 <code>type Status = &quot;open&quot; | &quot;closed&quot;</code>）。</li></ul></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>两者功能高度重叠，但 <code>interface</code> 更适合对象类型的扩展，而 <code>type</code> 更灵活。大型项目推荐优先用 <code>interface</code>，需要复杂类型时再用 <code>type</code>。</p></blockquote><p><strong>注意：</strong> 对于children这种比较特殊的prop,若需要传入多种不同的数据类型，可以通过内置的<code>React.ReactNode</code>类型注解</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = &#123;<br>    className :<span class="hljs-built_in">string</span><br>    <span class="hljs-attr">children</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactNode</span><br>  &#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"><span class="hljs-attr">props</span>:<span class="hljs-title class_">Props</span></span>)<br>&#123;<br>  <span class="hljs-keyword">const</span> &#123;className,children&#125; =  props<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      This is an app.</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Test&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="props-组件props注解"><a href="#props-组件props注解" class="headerlink" title="props - 组件props注解"></a>props - 组件props注解</h3><p>组件经常执行类型为函数的prop实现父传子，这类prop重点在于函数参数类型的注解</p><p>一般绑定事件时，事件函数的命名规范是 <strong>“on”+驼峰命名法</strong></p><p>在调用组件时，将触发事件绑定到组件的props上时，可以选择内联或函数的方式绑定，若单独定义函数，须对单独匹配参数类型。</p><p><strong>注意：</strong></p><ol><li><p>在组件内部调用时需要遵守类型约束，参数传递需要满足要求</p></li><li><p>绑定prop时如果绑定内联函数，可以直接推断出数据类型，否则需要单独注解匹配参数类型。</p></li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = &#123;<br>  <span class="hljs-attr">className</span>?:<span class="hljs-built_in">string</span><br>  <span class="hljs-attr">children</span>?: <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactNode</span><br>  <span class="hljs-attr">onGetMsg</span>?: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">msg</span>:<span class="hljs-built_in">string</span></span>)=&gt;</span><span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"><span class="hljs-attr">props</span>:<span class="hljs-title class_">Props</span></span>)<br>&#123;<br>  <span class="hljs-keyword">const</span> &#123;className,children&#125; =  props<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"><span class="hljs-attr">props</span>:<span class="hljs-title class_">Props</span></span>)&#123;<br>  <span class="hljs-keyword">const</span> &#123;onGetMsg&#125; = props<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">clickHandler</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    onGetMsg?.(<span class="hljs-string">&#x27;This is a msg&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;clickHandler&#125;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getMsgHandler</span> = (<span class="hljs-params"><span class="hljs-attr">msg</span>:<span class="hljs-built_in">string</span></span>) =&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      This is an app.</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Test&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">onGetMsg</span>=<span class="hljs-string">&#123;getMsgHandler&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="useRef与TypeScript"><a href="#useRef与TypeScript" class="headerlink" title="useRef与TypeScript"></a>useRef与TypeScript</h2><h3 id="useRef-获取DOM"><a href="#useRef-获取DOM" class="headerlink" title="useRef - 获取DOM"></a>useRef - 获取DOM</h3><p>获取dom的场景，可以直接把要获取的dom元素的类型当成泛型参数传递给useRef,可以推导出.current属性的类型</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">const</span> domRef = useRef&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt;(<span class="hljs-literal">null</span>)<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-comment">// 可选链 前面值不为空(null/ undefined)执行链式调用</span><br>    domRef.<span class="hljs-property">current</span>?.<span class="hljs-title function_">focus</span>()<br>  &#125;,[])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      This is an app.</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;domRef&#125;</span>&gt;</span>Input<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useRef-引用稳定的储存器"><a href="#useRef-引用稳定的储存器" class="headerlink" title="useRef - 引用稳定的储存器"></a>useRef - 引用稳定的储存器</h3><p>把useRef当成引用稳定的储存器使用的场景，可以通过泛型传入联合类型来做。</p><h1 id="React理论和设计思想"><a href="#React理论和设计思想" class="headerlink" title="React理论和设计思想"></a>React理论和设计思想</h1><h2 id="Babel-SWC"><a href="#Babel-SWC" class="headerlink" title="Babel &amp; SWC"></a>Babel &amp; SWC</h2><h3 id="使用babel编译JS-JSX代码"><a href="#使用babel编译JS-JSX代码" class="headerlink" title="使用babel编译JS JSX代码"></a>使用babel编译JS JSX代码</h3><p>Babel 是一个 JavaScript 编译器,提供了JavaScript的编译过程，能够将源代码转换为目标代码。</p><p>对于ES6+的新特性，可通过corejs引入的方式实现向下兼容</p><p>AST -&gt; Transform -&gt; Generate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test.js</span><br><span class="hljs-comment">//语法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">a</span> = (<span class="hljs-params">params = <span class="hljs-number">2</span></span>) =&gt; <span class="hljs-number">1</span> + params;<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> c = [...b, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Babel</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Babel</span>()<br><span class="hljs-comment">//API</span><br><span class="hljs-keyword">const</span> x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>].<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> y = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-number">1</span> &#125;)<br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-comment">// 记得设置package.json的type为module</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Babel</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@babel/core&#x27;</span><br><span class="hljs-keyword">import</span> presetEnv <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span><br><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:fs&#x27;</span><br><span class="hljs-keyword">const</span> file = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./test.js&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br><span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Babel</span>.<span class="hljs-title function_">transform</span>(file, &#123;<br>    <span class="hljs-attr">presets</span>: [presetEnv]<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>)<br><br></code></pre></td></tr></table></figure><h3 id="使用swc编译JS-JSX"><a href="#使用swc编译JS-JSX" class="headerlink" title="使用swc编译JS JSX"></a>使用swc编译JS JSX</h3><p>SWC 既可用于编译，也可用于打包。对于编译，它使用现代 JavaScript 功能获取 JavaScript &#x2F; TypeScript 文件并输出所有主流浏览器支持的有效代码。</p><p><strong><code>SWC在单线程上比 Babel 快 20 倍，在四核上快 70 倍。</code></strong></p><p>简单点来说swc实现了和babel一样的功能，但是它比babel快。</p><p><em>唉唉，编程原神<code>rust</code>发力了</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> swc <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@swc/core&#x27;</span><br><br><span class="hljs-keyword">const</span> result = swc.<span class="hljs-title function_">transformFileSync</span>(<span class="hljs-string">&#x27;./test.js&#x27;</span>, &#123;<br>   <span class="hljs-attr">jsc</span>: &#123;<br>       <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;es5&quot;</span>, <span class="hljs-comment">//代码转换es5</span><br>       <span class="hljs-attr">parser</span>: &#123;<br>           <span class="hljs-attr">syntax</span>: <span class="hljs-string">&#x27;ecmascript&#x27;</span><br>       &#125;<br>   &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>)<br></code></pre></td></tr></table></figure><p><strong>swc转JSX</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> swc <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@swc/core&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>()<br><span class="hljs-keyword">const</span> result = swc.<span class="hljs-title function_">transformFileSync</span>(<span class="hljs-string">&#x27;./test.jsx&#x27;</span>, &#123;<br>    <span class="hljs-attr">jsc</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;es5&quot;</span>, <span class="hljs-comment">//代码转换es5</span><br>        <span class="hljs-attr">parser</span>: &#123;<br>            <span class="hljs-attr">syntax</span>: <span class="hljs-string">&#x27;ecmascript&#x27;</span>,<br>            <span class="hljs-attr">jsx</span>: <span class="hljs-literal">true</span><br>        &#125;,<br>        <span class="hljs-attr">transform</span>:&#123;<br>            <span class="hljs-attr">react</span>: &#123;<br>                <span class="hljs-attr">runtime</span>: <span class="hljs-string">&#x27;automatic&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>()<br></code></pre></td></tr></table></figure><h2 id="VDOM-虚拟DOM"><a href="#VDOM-虚拟DOM" class="headerlink" title="VDOM (虚拟DOM)"></a>VDOM (虚拟DOM)</h2><p>Virtual DOM 就是用JavaScript对象去描述一个DOM结构，虚拟DOM不是直接操作浏览器的真实DOM，而是首先对 UI 的更新在虚拟 DOM 中进行，再将变更高效地同步到真实 DOM 中。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Express:轻量化的Web开发框架</title>
    <link href="/2024/10/27/Express-%E8%BD%BB%E9%87%8F%E5%8C%96%E7%9A%84Web%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    <url>/2024/10/27/Express-%E8%BD%BB%E9%87%8F%E5%8C%96%E7%9A%84Web%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Express：轻量化的Web开发框架学习笔记"><a href="#Express：轻量化的Web开发框架学习笔记" class="headerlink" title="Express：轻量化的Web开发框架学习笔记"></a>Express：轻量化的Web开发框架学习笔记</h1><h2 id="Vol1-安装和使用Express"><a href="#Vol1-安装和使用Express" class="headerlink" title="Vol1.安装和使用Express"></a>Vol1.安装和使用Express</h2><h3 id="1-1-安装Express"><a href="#1-1-安装Express" class="headerlink" title="1.1 安装Express"></a>1.1 安装Express</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g express-generator</span><br>//在nodejs下安装Express<br>express $&#123;targetProjectName&#125;<br>//创建Express项目<br>npm install<br>//在项目文件夹内安装依赖<br>npm start<br>//启动项目，于http://localhost:3000<br></code></pre></td></tr></table></figure><h3 id="1-2-项目结构"><a href="#1-2-项目结构" class="headerlink" title="1.2 项目结构"></a>1.2 项目结构</h3><h4 id="Express默认应用中文件及其作用"><a href="#Express默认应用中文件及其作用" class="headerlink" title="Express默认应用中文件及其作用"></a>Express默认应用中文件及其作用</h4><table><thead><tr><th>目录名&#x2F;文件名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>bin</td><td>目录</td><td>服务器脚本默认目录</td></tr><tr><td>bin&#x2F;<a href="http://www.js/">www.js</a></td><td>文件</td><td>服务器默认脚本，即启动服务脚本</td></tr><tr><td>node_modules</td><td>目录</td><td>依赖包安装目录，用于存放依赖包</td></tr><tr><td>public</td><td>目录</td><td>静态资源目录，用于存放静态资源</td></tr><tr><td>routes</td><td>目录</td><td>路由目录，用于存放路由文件</td></tr><tr><td>routes&#x2F;index.js</td><td>文件</td><td>首页路由文件</td></tr><tr><td>routes&#x2F;users.js</td><td>文件</td><td>用户路由文件</td></tr><tr><td>views</td><td>目录</td><td>页面目录，用于存放页面文件</td></tr><tr><td>views&#x2F;error.jade</td><td>文件</td><td>错误页面</td></tr><tr><td>views&#x2F;index.jade</td><td>文件</td><td>首页</td></tr><tr><td>views&#x2F;layout.jade</td><td>文件</td><td>页面共用布局</td></tr><tr><td>app.js</td><td>文件</td><td>应用主文件</td></tr><tr><td>package.json</td><td>文件</td><td>项目配置文件</td></tr><tr><td>package-lock.json</td><td>文件</td><td>锁定的项目配置文件</td></tr></tbody></table><h3 id="1-3-Express路由"><a href="#1-3-Express路由" class="headerlink" title="1.3 Express路由"></a>1.3 Express路由</h3><h4 id="1-3-1-GET请求"><a href="#1-3-1-GET请求" class="headerlink" title="1.3.1 GET请求"></a>1.3.1 GET请求</h4><p>route&#x2F;index.js路由文件，即首页路由文件，是一个GET请求路由，格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>) <span class="hljs-comment">//引入</span><br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>() <span class="hljs-comment">//引入Express路由对象</span><br><br><span class="hljs-comment">//首页路由</span><br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;Express&#x27;</span>&#125;);<br>&#125;);<br>moudule.<span class="hljs-property">exports</span> = router<br><span class="hljs-comment">//导出路由</span><br></code></pre></td></tr></table></figure><h4 id="1-3-2-自定义路由"><a href="#1-3-2-自定义路由" class="headerlink" title="1.3.2 自定义路由"></a>1.3.2 自定义路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义一个GET请求‘/world’的路由，执行方法</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/world&#x27;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>&#125;);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="1-3-3-其他请求方式的路由"><a href="#1-3-3-其他请求方式的路由" class="headerlink" title="1.3.3 其他请求方式的路由"></a>1.3.3 其他请求方式的路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//router.post()</span><br><span class="hljs-comment">//router.put()</span><br><span class="hljs-comment">//router.delete()</span><br></code></pre></td></tr></table></figure><h4 id="1-3-4-路由匹配规则"><a href="#1-3-4-路由匹配规则" class="headerlink" title="1.3.4 路由匹配规则"></a>1.3.4 路由匹配规则</h4><p><strong>模糊匹配符</strong></p><table><thead><tr><th>符号</th><th>含义</th><th>效果</th></tr></thead><tbody><tr><td>+</td><td>紧接着前一个字母重复</td><td>we+st -&gt;weest weeest</td></tr><tr><td>(element)?</td><td>括号内元素缺失</td><td>w(es)?t -&gt;wt</td></tr><tr><td>*</td><td>两端之间插入任意元素</td><td>we * st -&gt;we123st</td></tr></tbody></table><p>同时支持了正则表达式，<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程</a></p><h4 id="1-3-5-中间件"><a href="#1-3-5-中间件" class="headerlink" title="1.3.5 中间件"></a>1.3.5 中间件</h4><p>在项目开发过程中，有时需要使用共同的方法来完成请求，为了提高效率，可以将这些共同的方法单独提出来，即中间件。</p><p>当前端使用GET方法请求根路径的时候，会进入第二个参数function中，这个路由处理方法就是Express中的中间件。</p><p>在Express中，中间件会被传入三个形参。</p><table><thead><tr><th>参数顺序</th><th>形参名</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>req</td><td>请求数据对象Request</td></tr><tr><td>2</td><td>res</td><td>返回数据对象Response</td></tr><tr><td>3</td><td>next</td><td>下一步函数</td></tr></tbody></table><p>例如，实现验证功能，可以在路由处理方法前再加一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/car&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这里是中间件&#x27;</span>);<br>    <span class="hljs-title function_">next</span>();<br>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;这里是返回&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="1-4-Express页面"><a href="#1-4-Express页面" class="headerlink" title="1.4 Express页面"></a>1.4 Express页面</h3><h4 id="1-4-1-更换模板引擎"><a href="#1-4-1-更换模板引擎" class="headerlink" title="1.4.1 更换模板引擎"></a>1.4.1 更换模板引擎</h4><p>Express的默认引擎是jade，为了便于开发，可以换成更简洁的art-template。</p><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -S art-template<br>npm install -S express-art-template<br></code></pre></td></tr></table></figure><p>修改项目根目录下的<code>app.js</code>，切换模板引擎。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>,<span class="hljs-string">&#x27;jade&#x27;</span>);<br><span class="hljs-comment">//原</span><br>app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;.html&#x27;</span>,<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-art-template&#x27;</span>));<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-4-2-渲染数据到页面上"><a href="#1-4-2-渲染数据到页面上" class="headerlink" title="1.4.2 渲染数据到页面上"></a>1.4.2 渲染数据到页面上</h4><p>在Express中将数据渲染到页面上的方法是Response对象的render方法，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;hello&#x27;</span>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这段代码向index.html传入了一个键值对{ title: ‘hello’}，在html界面可以使用双花括号来接收字段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is the value of title variable: &#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-4-3-条件渲染"><a href="#1-4-3-条件渲染" class="headerlink" title="1.4.3 条件渲染"></a>1.4.3 条件渲染</h4><h5 id="1-基本条件渲染"><a href="#1-基本条件渲染" class="headerlink" title="1.基本条件渲染"></a>1.基本条件渲染</h5><p><em>Vue.js:在想我的事情？</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is the value of title variable: &#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&#123;&#123;if age &lt; 30&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>今年&#123;&#123; age &#125;&#125;岁了，还没到30岁生日，加油！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&#123;&#123;/if&#125;&#125;<br>&#123;&#123;if age &gt; 30&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>今年&#123;&#123; age &#125;&#125;岁了，30岁生日已经过了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&#123;&#123;/if&#125;&#125;<br><br><br>//格式为&#123;&#123;if CONDITION&#125;&#125; <span class="hljs-tag">&lt;/&gt;</span> &#123;&#123;/if&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-嵌套条件渲染"><a href="#2-嵌套条件渲染" class="headerlink" title="2.嵌套条件渲染"></a>2.嵌套条件渲染</h5><p>同理，略。</p><h4 id="1-4-4-渲染循环"><a href="#1-4-4-渲染循环" class="headerlink" title="1.4.4 渲染循环"></a>1.4.4 渲染循环</h4><h5 id="基本渲染循环"><a href="#基本渲染循环" class="headerlink" title="基本渲染循环"></a>基本渲染循环</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>循环渲染<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;&#123;each list as item&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>数据id&#123;&#123;item.id&#125;&#125;，内容&#123;&#123;item.content&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&#123;&#123;/each&#125;&#125;<br></code></pre></td></tr></table></figure><p>在art-template中,循环渲染的固定写法是<code>&#123;&#123;each LIST as ITEM&#125;&#125;</code></p><h3 id="1-5-请求对象Request"><a href="#1-5-请求对象Request" class="headerlink" title="1.5 请求对象Request"></a>1.5 请求对象Request</h3><h4 id="1-5-1-Request-url属性"><a href="#1-5-1-Request-url属性" class="headerlink" title="1.5.1 Request.url属性"></a>1.5.1 Request.url属性</h4><p>Request.url属性可以获得请求地址。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">#./routes/index.<span class="hljs-property">js</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/abcd&#x27;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">url</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;Express&#x27;</span>&#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="1-5-2-Request-query属性"><a href="#1-5-2-Request-query属性" class="headerlink" title="1.5.2 Request.query属性"></a>1.5.2 Request.query属性</h4><p>Request.query常用来获取GET请求参数，它是一个对象，包含路由中每个查询字符串参数的属性。<strong>只能获得GET请求方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/book&#x27;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">query</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;Express&#x27;</span>&#125;);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="1-5-3-Request-body属性"><a href="#1-5-3-Request-body属性" class="headerlink" title="1.5.3 Request.body属性"></a>1.5.3 Request.body属性</h4><p>Express将POST请求参数封装在了Request.body对象中，以键值对形式存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/abc&#x27;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>);<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;Express&#x27;</span>&#125;);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="1-5-4-Request-params属性"><a href="#1-5-4-Request-params属性" class="headerlink" title="1.5.4 Request.params属性"></a>1.5.4 Request.params属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/book/:id&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>)<br>    <span class="hljs-comment">// 此时返回&#123;id:2&#125;</span><br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;Express&#x27;</span>&#125;);<br>&#125;)<br></code></pre></td></tr></table></figure><p>Express通过URL传入的参数存到了Request.params属性，同时也是一个对象，可以获取自定义URL的任意一个参数。</p><h4 id="1-5-5-Request-headers属性"><a href="#1-5-5-Request-headers属性" class="headerlink" title="1.5.5 Request.headers属性"></a>1.5.5 Request.headers属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/abc&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">headers</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>Express也可以获取到请求头的数据，存在Request.header中。</p><h4 id="1-5-6-Request-cookies属性"><a href="#1-5-6-Request-cookies属性" class="headerlink" title="1.5.6 Request.cookies属性"></a>1.5.6 Request.cookies属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/abc&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">cookies</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>Express提供了简单的获取客户端cookies的方式，并以对象方式储存。</p><h3 id="1-6-返回对象Response"><a href="#1-6-返回对象Response" class="headerlink" title="1.6 返回对象Response"></a>1.6 返回对象Response</h3><h4 id="1-6-1-Response-render-方法"><a href="#1-6-1-Response-render-方法" class="headerlink" title="1.6.1 Response.render()方法"></a>1.6.1 Response.render()方法</h4><p><code>Response.render(#view:String,locals:Object,callback:Function)</code></p><p><strong>#view:</strong> 必选项，页面文件，用于渲染的文件路径。</p><p><strong>locals:</strong> 属性定义页面的局部变量。</p><p><strong>callback:</strong> 回调函数，返回困难的错误和呈现的字符串，但不执行自动响应。发生错误时在<code>next(err)</code>中内部调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>) <span class="hljs-comment">//渲染一个页面文件到客户端</span><br><br><br>res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,html</span>)&#123;<br>    res.<span class="hljs-title function_">send</span>(html);<br>    <span class="hljs-comment">//回调函数，明确指定发送的HTML字符串</span><br>&#125;)<br><br>res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;user&#x27;</span>,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Tobi&#x27;</span>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,html</span>))<br><span class="hljs-comment">//渲染完毕的回调函数</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="/2024/10/06/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/06/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue框架学习"><a href="#Vue框架学习" class="headerlink" title="Vue框架学习"></a>Vue框架学习</h1><p>渐进式JavaScript框架</p><p>官方文档：</p><blockquote><p><a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p></blockquote><h2 id="Vue-API风格"><a href="#Vue-API风格" class="headerlink" title="Vue API风格"></a>Vue API风格</h2><h4 id="选项式API-组合式API"><a href="#选项式API-组合式API" class="headerlink" title="选项式API&#x2F;组合式API"></a>选项式API&#x2F;组合式API</h4><h2 id="Vue安装"><a href="#Vue安装" class="headerlink" title="Vue安装"></a>Vue安装</h2><p>在NodeJS命令行中键入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npmignore">npm init vue@latest<br></code></pre></td></tr></table></figure><p>或者引入CDN(Vue3)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Vue-目录"><a href="#Vue-目录" class="headerlink" title="Vue 目录"></a>Vue 目录</h2><ol><li><p>.vscode —VSC工具配置文件</p></li><li><p>node_module —Vue项目运行依赖</p></li><li><p>public —资源文件夹</p></li><li><p>src — 源代码</p></li><li><p>.gitgnore —git忽略文件</p></li><li><p>index.html —入口HTML文件</p></li><li><p>package.json —信息描述文件</p></li><li><p>README.md —注释文件</p></li><li><p>vite.config.js —vue配置文件</p></li></ol><h2 id="Vue-js对象"><a href="#Vue-js对象" class="headerlink" title="Vue.js对象"></a>Vue.js对象</h2><p>每个Vue.js应用都是通过Vue.js函数创建一个新的Vue.js实例开始的，此处为Vue3版。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; createApp &#125; = <span class="hljs-title class_">Vue</span>;<br><br><span class="hljs-comment">// 创建一个新的 Vue 应用</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;<br>    <span class="hljs-comment">// 组件的状态数据</span><br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-comment">// 在这里定义响应式数据</span><br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello, Vue!&#x27;</span><br>        &#125;;<br>    &#125;,<br>    <span class="hljs-comment">// 组件的方法</span><br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-comment">// 定义一个方法</span><br>        <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>); <span class="hljs-comment">// 弹出当前的 message 内容</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 组件的生命周期钩子</span><br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;组件已挂载！&#x27;</span>); <span class="hljs-comment">// 在组件挂载后执行的代码</span><br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 挂载 Vue 应用到目标 DOM 元素</span><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>); <span class="hljs-comment">// 将 Vue 应用挂载到 id 为 &#x27;app&#x27; 的元素上</span><br></code></pre></td></tr></table></figure><p>可以在创建的Vue对象内定义实例property（属性），包括data等,可以在data内写入JSON对象。但只有<strong>在实例被创建时就已经存在于data中的<code>property</code></strong> 才是响应式的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>:data<br>&#125;)<br>vm.<span class="hljs-property">b</span>=<span class="hljs-string">&quot;hi&quot;</span>  <span class="hljs-comment">//没用</span><br></code></pre></td></tr></table></figure><p>使用 <strong><code>Object.freeze()</code></strong> 会解除Vue.js的响应式效果，再度改变property不会渲染到视图上。</p><h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h2><h4 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"># app.<span class="hljs-property">vue</span><br><br>&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123; msg &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="hljs-comment">//表达式</span><br>&lt;/template&gt;<br><br><br><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;神奇的魔法&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="使用JavaScript表达式"><a href="#使用JavaScript表达式" class="headerlink" title="使用JavaScript表达式"></a>使用JavaScript表达式</h4><p>每个绑定只支持<strong>单一表达式</strong>，即一段能够被求值的JavaScript代码，if语句等逻辑操作语句不可以加入模板。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"># app.<span class="hljs-property">vue</span><br><br><br>&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; num + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;ok ? &#x27;YES&#x27; : &#x27;NO &#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;神奇的语法&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">num</span>:<span class="hljs-number">10</span>,</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">ok</span>:<span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;    </span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br></code></pre></td></tr></table></figure><h4 id="原始HTML"><a href="#原始HTML" class="headerlink" title="原始HTML"></a>原始HTML</h4><p>双大括号会将数据插值为纯文本而非HTML，需要使用<code>v-html</code>指令插入HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">#app.vue<br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;rawHtml&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    # 纯文本属性<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>html属性：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">rawHtml</span>:<span class="hljs-string">&quot;&lt;a href=&quot;</span><span class="hljs-attr">https</span>:<span class="hljs-comment">//kivo.wiki/data/character/373&quot;&gt;百战星野&lt;/a&gt;&quot;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Vue属性绑定"><a href="#Vue属性绑定" class="headerlink" title="Vue属性绑定"></a>Vue属性绑定</h2><h4 id="v-bind绑定"><a href="#v-bind绑定" class="headerlink" title="v-bind绑定"></a>v-bind绑定</h4><p>双大括号并不能在HTML attributes中直接使用，想要响应式绑定attribute需要使用<code>v-bind</code>指令</p><p><code>v-bind:attribute</code>指令将元素的特定attribute（即属性）与组件的属性保持一致，若绑定值为  <code>null</code>或者<code>undefined</code>则将该属性从渲染的元素上移除</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">#app.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;dynamicClass&quot;</span>&gt;</span>AppID<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">dynamicId</span>:<span class="hljs-string">&quot;appid&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">dynamicClass</span>:<span class="hljs-string">&quot;appclass&quot;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br></code></pre></td></tr></table></figure><h4 id="v-bind简写"><a href="#v-bind简写" class="headerlink" title="v-bind简写"></a>v-bind简写</h4><p>简写如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;dynamicClass&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="布尔值Attribute"><a href="#布尔值Attribute" class="headerlink" title="布尔值Attribute"></a>布尔值Attribute</h4><p>依据true&#x2F;false值来决定attribute是否存在于该元素之上，例如<strong>disabled</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">#app.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;isButtonDisabled&quot;</span>&gt;</span>Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">isButtonDisabled</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="动态绑定多个值"><a href="#动态绑定多个值" class="headerlink" title="动态绑定多个值"></a>动态绑定多个值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html">#app.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;objectOfAttrs&quot;</span>&gt;</span>百战星野<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">objectOfAttrs</span>:&#123;</span><br><span class="language-javascript">                               <span class="hljs-attr">id</span>:<span class="hljs-string">&quot;appId&quot;</span>,</span><br><span class="language-javascript">                               <span class="hljs-attr">class</span>:<span class="hljs-string">&quot;appClass&quot;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p><code>v-if</code>指令用于条件性的渲染一块内容，只有在指令的表达式为真值时才被渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"># ./componets/if-vue.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>你能看见我吗<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="language-javascript">       <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                  <span class="hljs-attr">flag</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;    </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h4><p><code>v-else-if</code>提供了相应于<code>v-if</code>的“else-if区块”，可以连续多次使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"># ./componets/if-vue.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>Not A/B/C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="language-javascript">       <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                  <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;D&quot;</span>,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;    </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-if</code>与<code>v-show</code></p><p><code>v-if</code>“真实的”按条件渲染，在切换时，条件区块内的事件监听器和子组件都会被销毁和重建。</p><p><code>v-show</code>无论元素初始条件如何都会被渲染，只是切换了css的<code>display</code>属性。</p><p><strong>需要频繁切换</strong>使用<code>v-show</code>，<strong>在运行时绑定条件很少改变</strong>使用<code>v-if</code></p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>可以使用<code>v-for</code>指令基于一个数组来渲染列表。<code>v-for</code>指令使用<code>item in items</code>的语法，即迭代元素 in 遍历列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"># for-vue.vue<br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in names&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">names</span>:[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;    </span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="复杂访问"><a href="#复杂访问" class="headerlink" title="复杂访问"></a>复杂访问</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"># for-vue.vue<br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in/of result&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.avator&quot;</span>&gt;</span><br>        #标签属性绑定使用&quot;v-bind或者:attribute&quot;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">result</span>:[</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-title class_">Title</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;avator&quot;</span>:<span class="hljs-string">&quot;./img/01.jpg&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="数组下标"><a href="#数组下标" class="headerlink" title="数组下标"></a>数组下标</h4><p><code>v-for</code>也支持使用可选的第二个参数表示当前项的位置索引</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in names&quot;</span>&gt;</span>&#123;&#123; index&#125;:&#123;&#123;&#125;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">names</span>:[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="v-for与对象"><a href="#v-for与对象" class="headerlink" title="v-for与对象"></a>v-for与对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key,index)&quot;</span>&gt;</span><br>        &#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;index&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">export default&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                userInfo:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                            name:&quot;iwen&quot;,</span></span><br><span class="language-xml"><span class="language-handlebars">                            age:20,</span></span><br><span class="language-xml"><span class="language-handlebars">                           # key:value,</span></span><br><span class="language-xml"><span class="language-handlebars">                          &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">                &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;    </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span></span><br></code></pre></td></tr></table></figure><h2 id="通过Key管理状态"><a href="#通过Key管理状态" class="headerlink" title="通过Key管理状态"></a>通过Key管理状态</h2><p>Vue渲染元素列表时，当数据项的顺序改变时，Vue不会移动DOM元素的顺序而是就地更新每个元素以确保它们在原本指定的位置渲染。</p><p>为了给Vue一个提示以跟踪节点标识，可以为每个元素对应的标签提供唯一的<code> key</code>属性，以v-bind形式绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">names</span>: [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>key属性添加到v-for中<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in names&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>可以使用<code>v-on</code>指令（简写为<code>@</code>）来监听DOM事件，在事件触发时执行JavaScript。</p><p>用法：<code>v-on:click=&quot;methodName&quot;</code>或者<code>@click=&quot;handler&quot;</code></p><p>事件处理器可以是：</p><ol><li><p><strong>内联事件处理器</strong>：触发内联JavaScript语句</p></li><li><p><strong>方法事件处理器</strong>：指向组件定义的属性名或者路径</p></li></ol><h4 id="内联事件处理器"><a href="#内联事件处理器" class="headerlink" title="内联事件处理器"></a>内联事件处理器</h4><p>用于简单场景</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>内联事件处理器<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">&#125; &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;&#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">//所有方法和函数放在这里</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>方法事件处理器<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addCount&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h2><p>事件参数可以获取<code>event</code>对象和通过事件传递参数</p><h4 id="获取event对象"><a href="#获取event对象" class="headerlink" title="获取event对象"></a>获取<code>event</code>对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">    &#125; &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">addCount</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// Vue中的event对象与JavaScript中的对象相同</span></span><br><span class="language-javascript">      e.<span class="hljs-property">target</span>.<span class="hljs-property">innerHTML</span> =<span class="hljs-string">&quot;Add&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;&#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">//所有方法和函数放在这里</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>方法事件处理器<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addCount&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">names</span>:[<span class="hljs-string">&quot;iwen&quot;</span>,<span class="hljs-string">&quot;ime&quot;</span>,<span class="hljs-string">&quot;frank&quot;</span>]</span><br><span class="language-javascript">    &#125; &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">getNameHandler</span>(<span class="hljs-params">name</span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">//所有方法和函数放在这里</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>事件传参<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) of names&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getNameHandler(item)&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>如果需要同时传递参数和Event对象，可以采用形如<code>@click=&quot;handler(item,$event)&quot;</code>的格式来传递Event对象，且<strong>顺序不可随意调换</strong>。</p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>在处理事件时调用<code>event.preventDefault()</code>等很常见，但为了避免反复的处理DOM事件的琐事可以使用<strong>事件修饰符</strong>，方便开发者专注于数据逻辑。</p><ol><li><p><code>.stop</code></p></li><li><p><code>.prevent</code></p></li><li><p><code>.once</code></p></li><li><p><code>.enter</code></p></li><li><p>…</p></li></ol><blockquote><p>参考链接：<a href="(https://cn.vuejs.org/guide/essentials/event-handling.html#event-modifiers)">[事件处理 | Vue.js]</a></p></blockquote><h4 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">clickHandle</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了&#x27;</span>)&#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>事件修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;clickHandle&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">clickHandle</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了&#x27;</span>)&#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title function_">clickDiv</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了div&#x27;</span>)&#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title function_">clickP</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了p&#x27;</span>)&#125;,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>事件修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;clickHandle&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickDiv&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;clickP&quot;</span>&gt;</span>测试冒泡<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="数组变化侦测"><a href="#数组变化侦测" class="headerlink" title="数组变化侦测"></a>数组变化侦测</h2><h4 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h4><p>Vue能够侦听响应式数组的变更方法，并在它们被调用时触发相关更新，变更方法包括：</p><ul><li><p><code>push()</code></p></li><li><p><code>pop()</code></p></li><li><p><code>shift()</code></p></li><li><p><code>unshift()</code></p></li><li><p><code>splice()</code></p></li><li><p><code>sort()</code></p></li><li><p><code>reverse()</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">names</span>:[<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">addListHandler</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">names</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;HOSHINO&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>数组变化<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addListHandler&quot;</span>&gt;</span>添加数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) of names&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="替换一个数组"><a href="#替换一个数组" class="headerlink" title="替换一个数组"></a>替换一个数组</h4><p>在数组的操作过程中，存在一些不可变(immutable)的方法，例如<code>filter()</code>,<code>concat()</code>,<code>slice()</code>，这些方法不会改变原数组，而是返回一个新的数组，因此遇到非变更方法时，需要将<strong>旧数组替换为新数组</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">names</span>:[<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">addListHandler</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">names</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">names</span>.<span class="hljs-title function_">concat</span>([<span class="hljs-string">&quot;sakura&quot;</span>]);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>数组变化<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addListHandler&quot;</span>&gt;</span>添加数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) of names&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>在模板中编写太多逻辑会使得模板变得臃肿，因此可以使用<strong>计算属性</strong>来描述响应式状态的逻辑。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">tableData</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">content</span>:[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">namesContent</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">tableData</span>.<span class="hljs-property">content</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//在此编写计算属性</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;tableData.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;namesContent&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><blockquote><p><strong>重点区别</strong></p><p>计算属性：计算属性值会基于其响应式依赖被缓存，仅在依赖更新时再重新计算</p><p>方法：方法调用总是在重渲染发生再次执行</p></blockquote><h2 id="Class绑定"><a href="#Class绑定" class="headerlink" title="Class绑定"></a>Class绑定</h2><p>在Vue中可以使用功能更加强大的<code>v-bind</code>，除了字符串，表达式也可以对象或者数组，此处为class属性插值表达式。</p><h4 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">classObject</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;active&#x27;</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObject&quot;</span> &gt;</span>Class样式绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>//也可以是数组[atrriVar1,attriVar2...]<br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong></p><p>数组和对象嵌套过程中，只能在数组内嵌套对象，反之不行。</p></blockquote><h2 id="Style绑定"><a href="#Style绑定" class="headerlink" title="Style绑定"></a>Style绑定</h2><p>在Vue中可以使用功能更加强大的<code>v-bind</code>，除了字符串，表达式也可以对象或者数组，此处为内嵌样式表达式。</p><h4 id="绑定对象-1"><a href="#绑定对象-1" class="headerlink" title="绑定对象"></a>绑定对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;color:activeColor,fontSize:fontSize + &#x27;px&#x27;&#125;&quot;</span>&gt;</span>Style绑定<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>// :style=&quot;styleObj&quot;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">activeColor</span>:<span class="hljs-string">&quot;red&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">fontSize</span>: <span class="hljs-number">30</span>,</span><br><span class="language-javascript">        <span class="hljs-comment">//styleObj:&#123;color:&#x27;red&#x27;,fontSize:30&#125;</span></span><br><span class="language-javascript">&#125;    </span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>我们可以使用<code>watch</code>选项在每次响应式属性发生变化时触发一个函数。</p><p><em>watch下的函数名必须与被侦听的数据对象保持一致</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">updateHandler</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;World&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">//newVal改变之后</span></span><br><span class="language-javascript">    <span class="hljs-title function_">message</span>(<span class="hljs-params">newVal, oldVal</span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">//数据发生变化时执行</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newVal:&#x27;</span>, newVal, <span class="hljs-string">&#x27;oldVal:&#x27;</span>, oldVal)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>侦听器<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateHandler&quot;</span>&gt;</span>修改数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><p>在前端处理表单时，我们常常将表单输入框的内容同步给JavaScript中的相应变量。手动连接值绑定和更改事件监听器会比较麻烦，使用<code>v-model</code>简化了这一步骤，<code>v-model</code>负责监听用户输入事件并更新数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>表单输入绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="常见表单输入绑定"><a href="#常见表单输入绑定" class="headerlink" title="常见表单输入绑定"></a>常见表单输入绑定</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>单行文本输入框绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;singleMessage&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        输入的内容：&#123;&#123; singleMessage &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>多行文本输入框绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;multiMessage&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        输入的内容：&#123;&#123; multiMessage &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>复选框绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkboxValue&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&lt;/input/&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checkboxValue &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>单选框绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;radioPicked&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;radioPicked&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>选中的值：&#123;&#123; radioPicked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>下拉列表绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectValue&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 150px&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;option1&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;option2&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;option3&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>选中的值：&#123;&#123; selectValue &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">singleMessage</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">multiMessage</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">checkboxValue</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">radioPicked</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">selectValue</span>: [],</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);  <span class="hljs-comment">// 在这里挂载应用到 #app</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h4><p>对复选框有<code>true-value</code>和<code>false-value</code>属性，分别表示选中和未选中的绑定值，此时可动态绑定到v-model的数据属性。</p><p>对单选框有<code>v-bind:value</code></p><p>对选择框有<code>v-bind:value=&quot;&#123;&#125;&quot;</code>,动态属性为object类型</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p><code>v-model</code>也提供了形如<code>.lazy</code>,<code>.number</code>,<code>.trim</code>的修饰符</p><p>默认情况下，<code>v-model</code>会在每次<code>input</code>事件后更新数据，可以添加<code>.lazy</code>修饰符来改为在每次<code>change</code>事件后再更新数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>表单输入绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>如果想将用户的输入转换为数值类型，则可以给v-model添加<code>.number</code>修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果要自动过滤用户输入的首尾空白字符，可以添加<code>.trim</code>修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
